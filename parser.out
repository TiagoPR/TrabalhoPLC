Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> Vars Funcs Cod
Rule 2     Escrever -> PRINT corpoescreve .
Rule 3     corpoescreve -> <empty>
Rule 4     corpoescreve -> alter corpoescreve
Rule 5     alter -> FRASE
Rule 6     alter -> expr
Rule 7     Vars -> <empty>
Rule 8     Vars -> var Vars
Rule 9     Funcs -> <empty>
Rule 10    Funcs -> Funcs Func
Rule 11    Func -> ID begin Cod return expr end
Rule 12    Cod -> <empty>
Rule 13    var -> INT ID .
Rule 14    var -> INT ID = expr .
Rule 15    Cod -> Linha Cod
Rule 16    Linha -> Escrever
Rule 17    Linha -> atr
Rule 18    Linha -> Ler
Rule 19    Linha -> cond
Rule 20    Linha -> SE
Rule 21    SE -> IF cond THEN Cod ELSE Cod
Rule 22    Ler -> ID = INPUT FRASE .
Rule 23    Linha -> Ciclo
Rule 24    Ciclo -> WHILE cond DO Cod
Rule 25    atr -> ID = expr .
Rule 26    bool -> TRUE
Rule 27    bool -> FALSE
Rule 28    cond -> bool
Rule 29    cond -> expr
Rule 30    oprelacao -> INF
Rule 31    oprelacao -> EQUAL
Rule 32    oprelacao -> INFEQ
Rule 33    oprelacao -> SUP
Rule 34    oprelacao -> SUPEQ
Rule 35    cond -> expr oprelacao expr
Rule 36    cond -> cond E cond
Rule 37    cond -> cond OU cond
Rule 38    expr -> expr + termo
Rule 39    expr -> expr - termo
Rule 40    expr -> termo
Rule 41    termo -> termo * fator
Rule 42    termo -> termo / fator
Rule 43    termo -> fator
Rule 44    fator -> NUM
Rule 45    fator -> ID
Rule 46    fator -> ( expr )

Terminals, with rules where they appear

(                    : 46
)                    : 46
*                    : 41
+                    : 38
-                    : 39
.                    : 2 13 14 22 25
/                    : 42
=                    : 14 22 25
DO                   : 24
E                    : 36
ELSE                 : 21
EQUAL                : 31
FALSE                : 27
FRASE                : 5 22
ID                   : 11 13 14 22 25 45
IF                   : 21
INF                  : 30
INFEQ                : 32
INPUT                : 22
INT                  : 13 14
NUM                  : 44
OU                   : 37
PRINT                : 2
SUP                  : 33
SUPEQ                : 34
THEN                 : 21
TRUE                 : 26
WHILE                : 24
begin                : 11
end                  : 11
error                : 
return               : 11

Nonterminals, with rules where they appear

Ciclo                : 23
Cod                  : 1 11 15 21 21 24
Escrever             : 16
Func                 : 10
Funcs                : 1 10
Ler                  : 18
Linha                : 15
Programa             : 0
SE                   : 20
Vars                 : 1 8
alter                : 4
atr                  : 17
bool                 : 28
cond                 : 19 21 24 36 36 37 37
corpoescreve         : 2 4
expr                 : 6 11 14 25 29 35 35 38 39 46
fator                : 41 42 43
oprelacao            : 35
termo                : 38 39 40 41 42
var                  : 8

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . Vars Funcs Cod
    (7) Vars -> .
    (8) Vars -> . var Vars
    (13) var -> . INT ID .
    (14) var -> . INT ID = expr .

    ID              reduce using rule 7 (Vars -> .)
    PRINT           reduce using rule 7 (Vars -> .)
    IF              reduce using rule 7 (Vars -> .)
    WHILE           reduce using rule 7 (Vars -> .)
    TRUE            reduce using rule 7 (Vars -> .)
    FALSE           reduce using rule 7 (Vars -> .)
    NUM             reduce using rule 7 (Vars -> .)
    (               reduce using rule 7 (Vars -> .)
    $end            reduce using rule 7 (Vars -> .)
    INT             shift and go to state 4

    Programa                       shift and go to state 1
    Vars                           shift and go to state 2
    var                            shift and go to state 3

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> Vars . Funcs Cod
    (9) Funcs -> .
    (10) Funcs -> . Funcs Func

    ID              reduce using rule 9 (Funcs -> .)
    PRINT           reduce using rule 9 (Funcs -> .)
    IF              reduce using rule 9 (Funcs -> .)
    WHILE           reduce using rule 9 (Funcs -> .)
    TRUE            reduce using rule 9 (Funcs -> .)
    FALSE           reduce using rule 9 (Funcs -> .)
    NUM             reduce using rule 9 (Funcs -> .)
    (               reduce using rule 9 (Funcs -> .)
    $end            reduce using rule 9 (Funcs -> .)

    Funcs                          shift and go to state 5

state 3

    (8) Vars -> var . Vars
    (7) Vars -> .
    (8) Vars -> . var Vars
    (13) var -> . INT ID .
    (14) var -> . INT ID = expr .

    ID              reduce using rule 7 (Vars -> .)
    PRINT           reduce using rule 7 (Vars -> .)
    IF              reduce using rule 7 (Vars -> .)
    WHILE           reduce using rule 7 (Vars -> .)
    TRUE            reduce using rule 7 (Vars -> .)
    FALSE           reduce using rule 7 (Vars -> .)
    NUM             reduce using rule 7 (Vars -> .)
    (               reduce using rule 7 (Vars -> .)
    $end            reduce using rule 7 (Vars -> .)
    INT             shift and go to state 4

    var                            shift and go to state 3
    Vars                           shift and go to state 6

state 4

    (13) var -> INT . ID .
    (14) var -> INT . ID = expr .

    ID              shift and go to state 7


state 5

    (1) Programa -> Vars Funcs . Cod
    (10) Funcs -> Funcs . Func
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (11) Func -> . ID begin Cod return expr end
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (20) Linha -> . SE
    (23) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (25) atr -> . ID = expr .
    (22) Ler -> . ID = INPUT FRASE .
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (21) SE -> . IF cond THEN Cod ELSE Cod
    (24) Ciclo -> . WHILE cond DO Cod
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    $end            reduce using rule 12 (Cod -> .)
    ID              shift and go to state 11
    PRINT           shift and go to state 19
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    (               shift and go to state 28

    Cod                            shift and go to state 8
    Func                           shift and go to state 9
    Linha                          shift and go to state 10
    expr                           shift and go to state 12
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    cond                           shift and go to state 16
    SE                             shift and go to state 17
    Ciclo                          shift and go to state 18
    bool                           shift and go to state 20
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 6

    (8) Vars -> var Vars .

    ID              reduce using rule 8 (Vars -> var Vars .)
    PRINT           reduce using rule 8 (Vars -> var Vars .)
    IF              reduce using rule 8 (Vars -> var Vars .)
    WHILE           reduce using rule 8 (Vars -> var Vars .)
    TRUE            reduce using rule 8 (Vars -> var Vars .)
    FALSE           reduce using rule 8 (Vars -> var Vars .)
    NUM             reduce using rule 8 (Vars -> var Vars .)
    (               reduce using rule 8 (Vars -> var Vars .)
    $end            reduce using rule 8 (Vars -> var Vars .)


state 7

    (13) var -> INT ID . .
    (14) var -> INT ID . = expr .

    .               shift and go to state 29
    =               shift and go to state 30


state 8

    (1) Programa -> Vars Funcs Cod .

    $end            reduce using rule 1 (Programa -> Vars Funcs Cod .)


state 9

    (10) Funcs -> Funcs Func .

    ID              reduce using rule 10 (Funcs -> Funcs Func .)
    PRINT           reduce using rule 10 (Funcs -> Funcs Func .)
    IF              reduce using rule 10 (Funcs -> Funcs Func .)
    WHILE           reduce using rule 10 (Funcs -> Funcs Func .)
    TRUE            reduce using rule 10 (Funcs -> Funcs Func .)
    FALSE           reduce using rule 10 (Funcs -> Funcs Func .)
    NUM             reduce using rule 10 (Funcs -> Funcs Func .)
    (               reduce using rule 10 (Funcs -> Funcs Func .)
    $end            reduce using rule 10 (Funcs -> Funcs Func .)


state 10

    (15) Cod -> Linha . Cod
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (20) Linha -> . SE
    (23) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (25) atr -> . ID = expr .
    (22) Ler -> . ID = INPUT FRASE .
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (21) SE -> . IF cond THEN Cod ELSE Cod
    (24) Ciclo -> . WHILE cond DO Cod
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 12 (Cod -> .)
    return          reduce using rule 12 (Cod -> .)
    ELSE            reduce using rule 12 (Cod -> .)
    PRINT           shift and go to state 19
    ID              shift and go to state 32
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    (               shift and go to state 28

  ! PRINT           [ reduce using rule 12 (Cod -> .) ]
  ! ID              [ reduce using rule 12 (Cod -> .) ]
  ! IF              [ reduce using rule 12 (Cod -> .) ]
  ! WHILE           [ reduce using rule 12 (Cod -> .) ]
  ! TRUE            [ reduce using rule 12 (Cod -> .) ]
  ! FALSE           [ reduce using rule 12 (Cod -> .) ]
  ! NUM             [ reduce using rule 12 (Cod -> .) ]
  ! (               [ reduce using rule 12 (Cod -> .) ]

    Linha                          shift and go to state 10
    Cod                            shift and go to state 31
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    cond                           shift and go to state 16
    SE                             shift and go to state 17
    Ciclo                          shift and go to state 18
    expr                           shift and go to state 12
    bool                           shift and go to state 20
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 11

    (11) Func -> ID . begin Cod return expr end
    (25) atr -> ID . = expr .
    (22) Ler -> ID . = INPUT FRASE .
    (45) fator -> ID .

    begin           shift and go to state 33
    =               shift and go to state 34
    *               reduce using rule 45 (fator -> ID .)
    /               reduce using rule 45 (fator -> ID .)
    +               reduce using rule 45 (fator -> ID .)
    -               reduce using rule 45 (fator -> ID .)
    INF             reduce using rule 45 (fator -> ID .)
    EQUAL           reduce using rule 45 (fator -> ID .)
    INFEQ           reduce using rule 45 (fator -> ID .)
    SUP             reduce using rule 45 (fator -> ID .)
    SUPEQ           reduce using rule 45 (fator -> ID .)
    E               reduce using rule 45 (fator -> ID .)
    OU              reduce using rule 45 (fator -> ID .)
    PRINT           reduce using rule 45 (fator -> ID .)
    ID              reduce using rule 45 (fator -> ID .)
    IF              reduce using rule 45 (fator -> ID .)
    WHILE           reduce using rule 45 (fator -> ID .)
    TRUE            reduce using rule 45 (fator -> ID .)
    FALSE           reduce using rule 45 (fator -> ID .)
    NUM             reduce using rule 45 (fator -> ID .)
    (               reduce using rule 45 (fator -> ID .)
    $end            reduce using rule 45 (fator -> ID .)


state 12

    (29) cond -> expr .
    (35) cond -> expr . oprelacao expr
    (38) expr -> expr . + termo
    (39) expr -> expr . - termo
    (30) oprelacao -> . INF
    (31) oprelacao -> . EQUAL
    (32) oprelacao -> . INFEQ
    (33) oprelacao -> . SUP
    (34) oprelacao -> . SUPEQ

    E               reduce using rule 29 (cond -> expr .)
    OU              reduce using rule 29 (cond -> expr .)
    PRINT           reduce using rule 29 (cond -> expr .)
    ID              reduce using rule 29 (cond -> expr .)
    IF              reduce using rule 29 (cond -> expr .)
    WHILE           reduce using rule 29 (cond -> expr .)
    TRUE            reduce using rule 29 (cond -> expr .)
    FALSE           reduce using rule 29 (cond -> expr .)
    NUM             reduce using rule 29 (cond -> expr .)
    (               reduce using rule 29 (cond -> expr .)
    $end            reduce using rule 29 (cond -> expr .)
    return          reduce using rule 29 (cond -> expr .)
    ELSE            reduce using rule 29 (cond -> expr .)
    THEN            reduce using rule 29 (cond -> expr .)
    DO              reduce using rule 29 (cond -> expr .)
    +               shift and go to state 36
    -               shift and go to state 37
    INF             shift and go to state 38
    EQUAL           shift and go to state 39
    INFEQ           shift and go to state 40
    SUP             shift and go to state 41
    SUPEQ           shift and go to state 42

    oprelacao                      shift and go to state 35

state 13

    (16) Linha -> Escrever .

    PRINT           reduce using rule 16 (Linha -> Escrever .)
    ID              reduce using rule 16 (Linha -> Escrever .)
    IF              reduce using rule 16 (Linha -> Escrever .)
    WHILE           reduce using rule 16 (Linha -> Escrever .)
    TRUE            reduce using rule 16 (Linha -> Escrever .)
    FALSE           reduce using rule 16 (Linha -> Escrever .)
    NUM             reduce using rule 16 (Linha -> Escrever .)
    (               reduce using rule 16 (Linha -> Escrever .)
    $end            reduce using rule 16 (Linha -> Escrever .)
    return          reduce using rule 16 (Linha -> Escrever .)
    ELSE            reduce using rule 16 (Linha -> Escrever .)


state 14

    (17) Linha -> atr .

    PRINT           reduce using rule 17 (Linha -> atr .)
    ID              reduce using rule 17 (Linha -> atr .)
    IF              reduce using rule 17 (Linha -> atr .)
    WHILE           reduce using rule 17 (Linha -> atr .)
    TRUE            reduce using rule 17 (Linha -> atr .)
    FALSE           reduce using rule 17 (Linha -> atr .)
    NUM             reduce using rule 17 (Linha -> atr .)
    (               reduce using rule 17 (Linha -> atr .)
    $end            reduce using rule 17 (Linha -> atr .)
    return          reduce using rule 17 (Linha -> atr .)
    ELSE            reduce using rule 17 (Linha -> atr .)


state 15

    (18) Linha -> Ler .

    PRINT           reduce using rule 18 (Linha -> Ler .)
    ID              reduce using rule 18 (Linha -> Ler .)
    IF              reduce using rule 18 (Linha -> Ler .)
    WHILE           reduce using rule 18 (Linha -> Ler .)
    TRUE            reduce using rule 18 (Linha -> Ler .)
    FALSE           reduce using rule 18 (Linha -> Ler .)
    NUM             reduce using rule 18 (Linha -> Ler .)
    (               reduce using rule 18 (Linha -> Ler .)
    $end            reduce using rule 18 (Linha -> Ler .)
    return          reduce using rule 18 (Linha -> Ler .)
    ELSE            reduce using rule 18 (Linha -> Ler .)


state 16

    (19) Linha -> cond .
    (36) cond -> cond . E cond
    (37) cond -> cond . OU cond

    PRINT           reduce using rule 19 (Linha -> cond .)
    ID              reduce using rule 19 (Linha -> cond .)
    IF              reduce using rule 19 (Linha -> cond .)
    WHILE           reduce using rule 19 (Linha -> cond .)
    TRUE            reduce using rule 19 (Linha -> cond .)
    FALSE           reduce using rule 19 (Linha -> cond .)
    NUM             reduce using rule 19 (Linha -> cond .)
    (               reduce using rule 19 (Linha -> cond .)
    $end            reduce using rule 19 (Linha -> cond .)
    return          reduce using rule 19 (Linha -> cond .)
    ELSE            reduce using rule 19 (Linha -> cond .)
    E               shift and go to state 43
    OU              shift and go to state 44


state 17

    (20) Linha -> SE .

    PRINT           reduce using rule 20 (Linha -> SE .)
    ID              reduce using rule 20 (Linha -> SE .)
    IF              reduce using rule 20 (Linha -> SE .)
    WHILE           reduce using rule 20 (Linha -> SE .)
    TRUE            reduce using rule 20 (Linha -> SE .)
    FALSE           reduce using rule 20 (Linha -> SE .)
    NUM             reduce using rule 20 (Linha -> SE .)
    (               reduce using rule 20 (Linha -> SE .)
    $end            reduce using rule 20 (Linha -> SE .)
    return          reduce using rule 20 (Linha -> SE .)
    ELSE            reduce using rule 20 (Linha -> SE .)


state 18

    (23) Linha -> Ciclo .

    PRINT           reduce using rule 23 (Linha -> Ciclo .)
    ID              reduce using rule 23 (Linha -> Ciclo .)
    IF              reduce using rule 23 (Linha -> Ciclo .)
    WHILE           reduce using rule 23 (Linha -> Ciclo .)
    TRUE            reduce using rule 23 (Linha -> Ciclo .)
    FALSE           reduce using rule 23 (Linha -> Ciclo .)
    NUM             reduce using rule 23 (Linha -> Ciclo .)
    (               reduce using rule 23 (Linha -> Ciclo .)
    $end            reduce using rule 23 (Linha -> Ciclo .)
    return          reduce using rule 23 (Linha -> Ciclo .)
    ELSE            reduce using rule 23 (Linha -> Ciclo .)


state 19

    (2) Escrever -> PRINT . corpoescreve .
    (3) corpoescreve -> .
    (4) corpoescreve -> . alter corpoescreve
    (5) alter -> . FRASE
    (6) alter -> . expr
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    .               reduce using rule 3 (corpoescreve -> .)
    FRASE           shift and go to state 47
    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    corpoescreve                   shift and go to state 45
    alter                          shift and go to state 46
    expr                           shift and go to state 48
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 20

    (28) cond -> bool .

    E               reduce using rule 28 (cond -> bool .)
    OU              reduce using rule 28 (cond -> bool .)
    PRINT           reduce using rule 28 (cond -> bool .)
    ID              reduce using rule 28 (cond -> bool .)
    IF              reduce using rule 28 (cond -> bool .)
    WHILE           reduce using rule 28 (cond -> bool .)
    TRUE            reduce using rule 28 (cond -> bool .)
    FALSE           reduce using rule 28 (cond -> bool .)
    NUM             reduce using rule 28 (cond -> bool .)
    (               reduce using rule 28 (cond -> bool .)
    $end            reduce using rule 28 (cond -> bool .)
    return          reduce using rule 28 (cond -> bool .)
    ELSE            reduce using rule 28 (cond -> bool .)
    THEN            reduce using rule 28 (cond -> bool .)
    DO              reduce using rule 28 (cond -> bool .)


state 21

    (21) SE -> IF . cond THEN Cod ELSE Cod
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    cond                           shift and go to state 50
    bool                           shift and go to state 20
    expr                           shift and go to state 12
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 22

    (24) Ciclo -> WHILE . cond DO Cod
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    cond                           shift and go to state 51
    bool                           shift and go to state 20
    expr                           shift and go to state 12
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 23

    (26) bool -> TRUE .

    E               reduce using rule 26 (bool -> TRUE .)
    OU              reduce using rule 26 (bool -> TRUE .)
    PRINT           reduce using rule 26 (bool -> TRUE .)
    ID              reduce using rule 26 (bool -> TRUE .)
    IF              reduce using rule 26 (bool -> TRUE .)
    WHILE           reduce using rule 26 (bool -> TRUE .)
    TRUE            reduce using rule 26 (bool -> TRUE .)
    FALSE           reduce using rule 26 (bool -> TRUE .)
    NUM             reduce using rule 26 (bool -> TRUE .)
    (               reduce using rule 26 (bool -> TRUE .)
    $end            reduce using rule 26 (bool -> TRUE .)
    return          reduce using rule 26 (bool -> TRUE .)
    ELSE            reduce using rule 26 (bool -> TRUE .)
    THEN            reduce using rule 26 (bool -> TRUE .)
    DO              reduce using rule 26 (bool -> TRUE .)


state 24

    (27) bool -> FALSE .

    E               reduce using rule 27 (bool -> FALSE .)
    OU              reduce using rule 27 (bool -> FALSE .)
    PRINT           reduce using rule 27 (bool -> FALSE .)
    ID              reduce using rule 27 (bool -> FALSE .)
    IF              reduce using rule 27 (bool -> FALSE .)
    WHILE           reduce using rule 27 (bool -> FALSE .)
    TRUE            reduce using rule 27 (bool -> FALSE .)
    FALSE           reduce using rule 27 (bool -> FALSE .)
    NUM             reduce using rule 27 (bool -> FALSE .)
    (               reduce using rule 27 (bool -> FALSE .)
    $end            reduce using rule 27 (bool -> FALSE .)
    return          reduce using rule 27 (bool -> FALSE .)
    ELSE            reduce using rule 27 (bool -> FALSE .)
    THEN            reduce using rule 27 (bool -> FALSE .)
    DO              reduce using rule 27 (bool -> FALSE .)


state 25

    (40) expr -> termo .
    (41) termo -> termo . * fator
    (42) termo -> termo . / fator

    +               reduce using rule 40 (expr -> termo .)
    -               reduce using rule 40 (expr -> termo .)
    INF             reduce using rule 40 (expr -> termo .)
    EQUAL           reduce using rule 40 (expr -> termo .)
    INFEQ           reduce using rule 40 (expr -> termo .)
    SUP             reduce using rule 40 (expr -> termo .)
    SUPEQ           reduce using rule 40 (expr -> termo .)
    E               reduce using rule 40 (expr -> termo .)
    OU              reduce using rule 40 (expr -> termo .)
    PRINT           reduce using rule 40 (expr -> termo .)
    ID              reduce using rule 40 (expr -> termo .)
    IF              reduce using rule 40 (expr -> termo .)
    WHILE           reduce using rule 40 (expr -> termo .)
    TRUE            reduce using rule 40 (expr -> termo .)
    FALSE           reduce using rule 40 (expr -> termo .)
    NUM             reduce using rule 40 (expr -> termo .)
    (               reduce using rule 40 (expr -> termo .)
    $end            reduce using rule 40 (expr -> termo .)
    return          reduce using rule 40 (expr -> termo .)
    ELSE            reduce using rule 40 (expr -> termo .)
    FRASE           reduce using rule 40 (expr -> termo .)
    .               reduce using rule 40 (expr -> termo .)
    THEN            reduce using rule 40 (expr -> termo .)
    DO              reduce using rule 40 (expr -> termo .)
    )               reduce using rule 40 (expr -> termo .)
    end             reduce using rule 40 (expr -> termo .)
    *               shift and go to state 52
    /               shift and go to state 53


state 26

    (43) termo -> fator .

    *               reduce using rule 43 (termo -> fator .)
    /               reduce using rule 43 (termo -> fator .)
    +               reduce using rule 43 (termo -> fator .)
    -               reduce using rule 43 (termo -> fator .)
    INF             reduce using rule 43 (termo -> fator .)
    EQUAL           reduce using rule 43 (termo -> fator .)
    INFEQ           reduce using rule 43 (termo -> fator .)
    SUP             reduce using rule 43 (termo -> fator .)
    SUPEQ           reduce using rule 43 (termo -> fator .)
    E               reduce using rule 43 (termo -> fator .)
    OU              reduce using rule 43 (termo -> fator .)
    PRINT           reduce using rule 43 (termo -> fator .)
    ID              reduce using rule 43 (termo -> fator .)
    IF              reduce using rule 43 (termo -> fator .)
    WHILE           reduce using rule 43 (termo -> fator .)
    TRUE            reduce using rule 43 (termo -> fator .)
    FALSE           reduce using rule 43 (termo -> fator .)
    NUM             reduce using rule 43 (termo -> fator .)
    (               reduce using rule 43 (termo -> fator .)
    $end            reduce using rule 43 (termo -> fator .)
    return          reduce using rule 43 (termo -> fator .)
    ELSE            reduce using rule 43 (termo -> fator .)
    FRASE           reduce using rule 43 (termo -> fator .)
    .               reduce using rule 43 (termo -> fator .)
    THEN            reduce using rule 43 (termo -> fator .)
    DO              reduce using rule 43 (termo -> fator .)
    )               reduce using rule 43 (termo -> fator .)
    end             reduce using rule 43 (termo -> fator .)


state 27

    (44) fator -> NUM .

    *               reduce using rule 44 (fator -> NUM .)
    /               reduce using rule 44 (fator -> NUM .)
    +               reduce using rule 44 (fator -> NUM .)
    -               reduce using rule 44 (fator -> NUM .)
    INF             reduce using rule 44 (fator -> NUM .)
    EQUAL           reduce using rule 44 (fator -> NUM .)
    INFEQ           reduce using rule 44 (fator -> NUM .)
    SUP             reduce using rule 44 (fator -> NUM .)
    SUPEQ           reduce using rule 44 (fator -> NUM .)
    E               reduce using rule 44 (fator -> NUM .)
    OU              reduce using rule 44 (fator -> NUM .)
    PRINT           reduce using rule 44 (fator -> NUM .)
    ID              reduce using rule 44 (fator -> NUM .)
    IF              reduce using rule 44 (fator -> NUM .)
    WHILE           reduce using rule 44 (fator -> NUM .)
    TRUE            reduce using rule 44 (fator -> NUM .)
    FALSE           reduce using rule 44 (fator -> NUM .)
    NUM             reduce using rule 44 (fator -> NUM .)
    (               reduce using rule 44 (fator -> NUM .)
    $end            reduce using rule 44 (fator -> NUM .)
    return          reduce using rule 44 (fator -> NUM .)
    ELSE            reduce using rule 44 (fator -> NUM .)
    FRASE           reduce using rule 44 (fator -> NUM .)
    .               reduce using rule 44 (fator -> NUM .)
    THEN            reduce using rule 44 (fator -> NUM .)
    DO              reduce using rule 44 (fator -> NUM .)
    )               reduce using rule 44 (fator -> NUM .)
    end             reduce using rule 44 (fator -> NUM .)


state 28

    (46) fator -> ( . expr )
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    expr                           shift and go to state 54
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 29

    (13) var -> INT ID . .

    INT             reduce using rule 13 (var -> INT ID . .)
    ID              reduce using rule 13 (var -> INT ID . .)
    PRINT           reduce using rule 13 (var -> INT ID . .)
    IF              reduce using rule 13 (var -> INT ID . .)
    WHILE           reduce using rule 13 (var -> INT ID . .)
    TRUE            reduce using rule 13 (var -> INT ID . .)
    FALSE           reduce using rule 13 (var -> INT ID . .)
    NUM             reduce using rule 13 (var -> INT ID . .)
    (               reduce using rule 13 (var -> INT ID . .)
    $end            reduce using rule 13 (var -> INT ID . .)


state 30

    (14) var -> INT ID = . expr .
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    expr                           shift and go to state 55
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 31

    (15) Cod -> Linha Cod .

    $end            reduce using rule 15 (Cod -> Linha Cod .)
    return          reduce using rule 15 (Cod -> Linha Cod .)
    ELSE            reduce using rule 15 (Cod -> Linha Cod .)
    PRINT           reduce using rule 15 (Cod -> Linha Cod .)
    ID              reduce using rule 15 (Cod -> Linha Cod .)
    IF              reduce using rule 15 (Cod -> Linha Cod .)
    WHILE           reduce using rule 15 (Cod -> Linha Cod .)
    TRUE            reduce using rule 15 (Cod -> Linha Cod .)
    FALSE           reduce using rule 15 (Cod -> Linha Cod .)
    NUM             reduce using rule 15 (Cod -> Linha Cod .)
    (               reduce using rule 15 (Cod -> Linha Cod .)


state 32

    (25) atr -> ID . = expr .
    (22) Ler -> ID . = INPUT FRASE .
    (45) fator -> ID .

    =               shift and go to state 34
    *               reduce using rule 45 (fator -> ID .)
    /               reduce using rule 45 (fator -> ID .)
    +               reduce using rule 45 (fator -> ID .)
    -               reduce using rule 45 (fator -> ID .)
    INF             reduce using rule 45 (fator -> ID .)
    EQUAL           reduce using rule 45 (fator -> ID .)
    INFEQ           reduce using rule 45 (fator -> ID .)
    SUP             reduce using rule 45 (fator -> ID .)
    SUPEQ           reduce using rule 45 (fator -> ID .)
    E               reduce using rule 45 (fator -> ID .)
    OU              reduce using rule 45 (fator -> ID .)
    $end            reduce using rule 45 (fator -> ID .)
    return          reduce using rule 45 (fator -> ID .)
    ELSE            reduce using rule 45 (fator -> ID .)
    PRINT           reduce using rule 45 (fator -> ID .)
    ID              reduce using rule 45 (fator -> ID .)
    IF              reduce using rule 45 (fator -> ID .)
    WHILE           reduce using rule 45 (fator -> ID .)
    TRUE            reduce using rule 45 (fator -> ID .)
    FALSE           reduce using rule 45 (fator -> ID .)
    NUM             reduce using rule 45 (fator -> ID .)
    (               reduce using rule 45 (fator -> ID .)


state 33

    (11) Func -> ID begin . Cod return expr end
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (20) Linha -> . SE
    (23) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (25) atr -> . ID = expr .
    (22) Ler -> . ID = INPUT FRASE .
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (21) SE -> . IF cond THEN Cod ELSE Cod
    (24) Ciclo -> . WHILE cond DO Cod
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    return          reduce using rule 12 (Cod -> .)
    PRINT           shift and go to state 19
    ID              shift and go to state 32
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    (               shift and go to state 28

    Cod                            shift and go to state 56
    expr                           shift and go to state 12
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    cond                           shift and go to state 16
    SE                             shift and go to state 17
    Ciclo                          shift and go to state 18
    bool                           shift and go to state 20
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 34

    (25) atr -> ID = . expr .
    (22) Ler -> ID = . INPUT FRASE .
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    INPUT           shift and go to state 58
    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    expr                           shift and go to state 57
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 35

    (35) cond -> expr oprelacao . expr
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    expr                           shift and go to state 59
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 36

    (38) expr -> expr + . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    termo                          shift and go to state 60
    fator                          shift and go to state 26

state 37

    (39) expr -> expr - . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    termo                          shift and go to state 61
    fator                          shift and go to state 26

state 38

    (30) oprelacao -> INF .

    NUM             reduce using rule 30 (oprelacao -> INF .)
    ID              reduce using rule 30 (oprelacao -> INF .)
    (               reduce using rule 30 (oprelacao -> INF .)


state 39

    (31) oprelacao -> EQUAL .

    NUM             reduce using rule 31 (oprelacao -> EQUAL .)
    ID              reduce using rule 31 (oprelacao -> EQUAL .)
    (               reduce using rule 31 (oprelacao -> EQUAL .)


state 40

    (32) oprelacao -> INFEQ .

    NUM             reduce using rule 32 (oprelacao -> INFEQ .)
    ID              reduce using rule 32 (oprelacao -> INFEQ .)
    (               reduce using rule 32 (oprelacao -> INFEQ .)


state 41

    (33) oprelacao -> SUP .

    NUM             reduce using rule 33 (oprelacao -> SUP .)
    ID              reduce using rule 33 (oprelacao -> SUP .)
    (               reduce using rule 33 (oprelacao -> SUP .)


state 42

    (34) oprelacao -> SUPEQ .

    NUM             reduce using rule 34 (oprelacao -> SUPEQ .)
    ID              reduce using rule 34 (oprelacao -> SUPEQ .)
    (               reduce using rule 34 (oprelacao -> SUPEQ .)


state 43

    (36) cond -> cond E . cond
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    cond                           shift and go to state 62
    bool                           shift and go to state 20
    expr                           shift and go to state 12
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 44

    (37) cond -> cond OU . cond
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    cond                           shift and go to state 63
    bool                           shift and go to state 20
    expr                           shift and go to state 12
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 45

    (2) Escrever -> PRINT corpoescreve . .

    .               shift and go to state 64


state 46

    (4) corpoescreve -> alter . corpoescreve
    (3) corpoescreve -> .
    (4) corpoescreve -> . alter corpoescreve
    (5) alter -> . FRASE
    (6) alter -> . expr
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    .               reduce using rule 3 (corpoescreve -> .)
    FRASE           shift and go to state 47
    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    alter                          shift and go to state 46
    corpoescreve                   shift and go to state 65
    expr                           shift and go to state 48
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 47

    (5) alter -> FRASE .

    FRASE           reduce using rule 5 (alter -> FRASE .)
    NUM             reduce using rule 5 (alter -> FRASE .)
    ID              reduce using rule 5 (alter -> FRASE .)
    (               reduce using rule 5 (alter -> FRASE .)
    .               reduce using rule 5 (alter -> FRASE .)


state 48

    (6) alter -> expr .
    (38) expr -> expr . + termo
    (39) expr -> expr . - termo

    FRASE           reduce using rule 6 (alter -> expr .)
    NUM             reduce using rule 6 (alter -> expr .)
    ID              reduce using rule 6 (alter -> expr .)
    (               reduce using rule 6 (alter -> expr .)
    .               reduce using rule 6 (alter -> expr .)
    +               shift and go to state 36
    -               shift and go to state 37


state 49

    (45) fator -> ID .

    *               reduce using rule 45 (fator -> ID .)
    /               reduce using rule 45 (fator -> ID .)
    +               reduce using rule 45 (fator -> ID .)
    -               reduce using rule 45 (fator -> ID .)
    FRASE           reduce using rule 45 (fator -> ID .)
    NUM             reduce using rule 45 (fator -> ID .)
    ID              reduce using rule 45 (fator -> ID .)
    (               reduce using rule 45 (fator -> ID .)
    .               reduce using rule 45 (fator -> ID .)
    INF             reduce using rule 45 (fator -> ID .)
    EQUAL           reduce using rule 45 (fator -> ID .)
    INFEQ           reduce using rule 45 (fator -> ID .)
    SUP             reduce using rule 45 (fator -> ID .)
    SUPEQ           reduce using rule 45 (fator -> ID .)
    THEN            reduce using rule 45 (fator -> ID .)
    E               reduce using rule 45 (fator -> ID .)
    OU              reduce using rule 45 (fator -> ID .)
    DO              reduce using rule 45 (fator -> ID .)
    )               reduce using rule 45 (fator -> ID .)
    PRINT           reduce using rule 45 (fator -> ID .)
    IF              reduce using rule 45 (fator -> ID .)
    WHILE           reduce using rule 45 (fator -> ID .)
    TRUE            reduce using rule 45 (fator -> ID .)
    FALSE           reduce using rule 45 (fator -> ID .)
    $end            reduce using rule 45 (fator -> ID .)
    return          reduce using rule 45 (fator -> ID .)
    ELSE            reduce using rule 45 (fator -> ID .)
    end             reduce using rule 45 (fator -> ID .)


state 50

    (21) SE -> IF cond . THEN Cod ELSE Cod
    (36) cond -> cond . E cond
    (37) cond -> cond . OU cond

    THEN            shift and go to state 66
    E               shift and go to state 43
    OU              shift and go to state 44


state 51

    (24) Ciclo -> WHILE cond . DO Cod
    (36) cond -> cond . E cond
    (37) cond -> cond . OU cond

    DO              shift and go to state 67
    E               shift and go to state 43
    OU              shift and go to state 44


state 52

    (41) termo -> termo * . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    fator                          shift and go to state 68

state 53

    (42) termo -> termo / . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    fator                          shift and go to state 69

state 54

    (46) fator -> ( expr . )
    (38) expr -> expr . + termo
    (39) expr -> expr . - termo

    )               shift and go to state 70
    +               shift and go to state 36
    -               shift and go to state 37


state 55

    (14) var -> INT ID = expr . .
    (38) expr -> expr . + termo
    (39) expr -> expr . - termo

    .               shift and go to state 71
    +               shift and go to state 36
    -               shift and go to state 37


state 56

    (11) Func -> ID begin Cod . return expr end

    return          shift and go to state 72


state 57

    (25) atr -> ID = expr . .
    (38) expr -> expr . + termo
    (39) expr -> expr . - termo

    .               shift and go to state 73
    +               shift and go to state 36
    -               shift and go to state 37


state 58

    (22) Ler -> ID = INPUT . FRASE .

    FRASE           shift and go to state 74


state 59

    (35) cond -> expr oprelacao expr .
    (38) expr -> expr . + termo
    (39) expr -> expr . - termo

    E               reduce using rule 35 (cond -> expr oprelacao expr .)
    OU              reduce using rule 35 (cond -> expr oprelacao expr .)
    PRINT           reduce using rule 35 (cond -> expr oprelacao expr .)
    ID              reduce using rule 35 (cond -> expr oprelacao expr .)
    IF              reduce using rule 35 (cond -> expr oprelacao expr .)
    WHILE           reduce using rule 35 (cond -> expr oprelacao expr .)
    TRUE            reduce using rule 35 (cond -> expr oprelacao expr .)
    FALSE           reduce using rule 35 (cond -> expr oprelacao expr .)
    NUM             reduce using rule 35 (cond -> expr oprelacao expr .)
    (               reduce using rule 35 (cond -> expr oprelacao expr .)
    $end            reduce using rule 35 (cond -> expr oprelacao expr .)
    return          reduce using rule 35 (cond -> expr oprelacao expr .)
    ELSE            reduce using rule 35 (cond -> expr oprelacao expr .)
    THEN            reduce using rule 35 (cond -> expr oprelacao expr .)
    DO              reduce using rule 35 (cond -> expr oprelacao expr .)
    +               shift and go to state 36
    -               shift and go to state 37


state 60

    (38) expr -> expr + termo .
    (41) termo -> termo . * fator
    (42) termo -> termo . / fator

    +               reduce using rule 38 (expr -> expr + termo .)
    -               reduce using rule 38 (expr -> expr + termo .)
    INF             reduce using rule 38 (expr -> expr + termo .)
    EQUAL           reduce using rule 38 (expr -> expr + termo .)
    INFEQ           reduce using rule 38 (expr -> expr + termo .)
    SUP             reduce using rule 38 (expr -> expr + termo .)
    SUPEQ           reduce using rule 38 (expr -> expr + termo .)
    E               reduce using rule 38 (expr -> expr + termo .)
    OU              reduce using rule 38 (expr -> expr + termo .)
    PRINT           reduce using rule 38 (expr -> expr + termo .)
    ID              reduce using rule 38 (expr -> expr + termo .)
    IF              reduce using rule 38 (expr -> expr + termo .)
    WHILE           reduce using rule 38 (expr -> expr + termo .)
    TRUE            reduce using rule 38 (expr -> expr + termo .)
    FALSE           reduce using rule 38 (expr -> expr + termo .)
    NUM             reduce using rule 38 (expr -> expr + termo .)
    (               reduce using rule 38 (expr -> expr + termo .)
    $end            reduce using rule 38 (expr -> expr + termo .)
    return          reduce using rule 38 (expr -> expr + termo .)
    ELSE            reduce using rule 38 (expr -> expr + termo .)
    FRASE           reduce using rule 38 (expr -> expr + termo .)
    .               reduce using rule 38 (expr -> expr + termo .)
    THEN            reduce using rule 38 (expr -> expr + termo .)
    DO              reduce using rule 38 (expr -> expr + termo .)
    )               reduce using rule 38 (expr -> expr + termo .)
    end             reduce using rule 38 (expr -> expr + termo .)
    *               shift and go to state 52
    /               shift and go to state 53


state 61

    (39) expr -> expr - termo .
    (41) termo -> termo . * fator
    (42) termo -> termo . / fator

    +               reduce using rule 39 (expr -> expr - termo .)
    -               reduce using rule 39 (expr -> expr - termo .)
    INF             reduce using rule 39 (expr -> expr - termo .)
    EQUAL           reduce using rule 39 (expr -> expr - termo .)
    INFEQ           reduce using rule 39 (expr -> expr - termo .)
    SUP             reduce using rule 39 (expr -> expr - termo .)
    SUPEQ           reduce using rule 39 (expr -> expr - termo .)
    E               reduce using rule 39 (expr -> expr - termo .)
    OU              reduce using rule 39 (expr -> expr - termo .)
    PRINT           reduce using rule 39 (expr -> expr - termo .)
    ID              reduce using rule 39 (expr -> expr - termo .)
    IF              reduce using rule 39 (expr -> expr - termo .)
    WHILE           reduce using rule 39 (expr -> expr - termo .)
    TRUE            reduce using rule 39 (expr -> expr - termo .)
    FALSE           reduce using rule 39 (expr -> expr - termo .)
    NUM             reduce using rule 39 (expr -> expr - termo .)
    (               reduce using rule 39 (expr -> expr - termo .)
    $end            reduce using rule 39 (expr -> expr - termo .)
    return          reduce using rule 39 (expr -> expr - termo .)
    ELSE            reduce using rule 39 (expr -> expr - termo .)
    FRASE           reduce using rule 39 (expr -> expr - termo .)
    .               reduce using rule 39 (expr -> expr - termo .)
    THEN            reduce using rule 39 (expr -> expr - termo .)
    DO              reduce using rule 39 (expr -> expr - termo .)
    )               reduce using rule 39 (expr -> expr - termo .)
    end             reduce using rule 39 (expr -> expr - termo .)
    *               shift and go to state 52
    /               shift and go to state 53


state 62

    (36) cond -> cond E cond .
    (36) cond -> cond . E cond
    (37) cond -> cond . OU cond

  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
    PRINT           reduce using rule 36 (cond -> cond E cond .)
    ID              reduce using rule 36 (cond -> cond E cond .)
    IF              reduce using rule 36 (cond -> cond E cond .)
    WHILE           reduce using rule 36 (cond -> cond E cond .)
    TRUE            reduce using rule 36 (cond -> cond E cond .)
    FALSE           reduce using rule 36 (cond -> cond E cond .)
    NUM             reduce using rule 36 (cond -> cond E cond .)
    (               reduce using rule 36 (cond -> cond E cond .)
    $end            reduce using rule 36 (cond -> cond E cond .)
    return          reduce using rule 36 (cond -> cond E cond .)
    ELSE            reduce using rule 36 (cond -> cond E cond .)
    THEN            reduce using rule 36 (cond -> cond E cond .)
    DO              reduce using rule 36 (cond -> cond E cond .)
    E               shift and go to state 43
    OU              shift and go to state 44

  ! E               [ reduce using rule 36 (cond -> cond E cond .) ]
  ! OU              [ reduce using rule 36 (cond -> cond E cond .) ]


state 63

    (37) cond -> cond OU cond .
    (36) cond -> cond . E cond
    (37) cond -> cond . OU cond

  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
    PRINT           reduce using rule 37 (cond -> cond OU cond .)
    ID              reduce using rule 37 (cond -> cond OU cond .)
    IF              reduce using rule 37 (cond -> cond OU cond .)
    WHILE           reduce using rule 37 (cond -> cond OU cond .)
    TRUE            reduce using rule 37 (cond -> cond OU cond .)
    FALSE           reduce using rule 37 (cond -> cond OU cond .)
    NUM             reduce using rule 37 (cond -> cond OU cond .)
    (               reduce using rule 37 (cond -> cond OU cond .)
    $end            reduce using rule 37 (cond -> cond OU cond .)
    return          reduce using rule 37 (cond -> cond OU cond .)
    ELSE            reduce using rule 37 (cond -> cond OU cond .)
    THEN            reduce using rule 37 (cond -> cond OU cond .)
    DO              reduce using rule 37 (cond -> cond OU cond .)
    E               shift and go to state 43
    OU              shift and go to state 44

  ! E               [ reduce using rule 37 (cond -> cond OU cond .) ]
  ! OU              [ reduce using rule 37 (cond -> cond OU cond .) ]


state 64

    (2) Escrever -> PRINT corpoescreve . .

    PRINT           reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    ID              reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    IF              reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    WHILE           reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    TRUE            reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    FALSE           reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    NUM             reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    (               reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    $end            reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    return          reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    ELSE            reduce using rule 2 (Escrever -> PRINT corpoescreve . .)


state 65

    (4) corpoescreve -> alter corpoescreve .

    .               reduce using rule 4 (corpoescreve -> alter corpoescreve .)


state 66

    (21) SE -> IF cond THEN . Cod ELSE Cod
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (20) Linha -> . SE
    (23) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (25) atr -> . ID = expr .
    (22) Ler -> . ID = INPUT FRASE .
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (21) SE -> . IF cond THEN Cod ELSE Cod
    (24) Ciclo -> . WHILE cond DO Cod
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    ELSE            reduce using rule 12 (Cod -> .)
    PRINT           shift and go to state 19
    ID              shift and go to state 32
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    (               shift and go to state 28

    cond                           shift and go to state 16
    Cod                            shift and go to state 75
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    SE                             shift and go to state 17
    Ciclo                          shift and go to state 18
    expr                           shift and go to state 12
    bool                           shift and go to state 20
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 67

    (24) Ciclo -> WHILE cond DO . Cod
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (20) Linha -> . SE
    (23) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (25) atr -> . ID = expr .
    (22) Ler -> . ID = INPUT FRASE .
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (21) SE -> . IF cond THEN Cod ELSE Cod
    (24) Ciclo -> . WHILE cond DO Cod
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 12 (Cod -> .)
    return          reduce using rule 12 (Cod -> .)
    ELSE            reduce using rule 12 (Cod -> .)
    PRINT           shift and go to state 19
    ID              shift and go to state 32
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    (               shift and go to state 28

  ! PRINT           [ reduce using rule 12 (Cod -> .) ]
  ! ID              [ reduce using rule 12 (Cod -> .) ]
  ! IF              [ reduce using rule 12 (Cod -> .) ]
  ! WHILE           [ reduce using rule 12 (Cod -> .) ]
  ! TRUE            [ reduce using rule 12 (Cod -> .) ]
  ! FALSE           [ reduce using rule 12 (Cod -> .) ]
  ! NUM             [ reduce using rule 12 (Cod -> .) ]
  ! (               [ reduce using rule 12 (Cod -> .) ]

    cond                           shift and go to state 16
    Cod                            shift and go to state 76
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    SE                             shift and go to state 17
    Ciclo                          shift and go to state 18
    expr                           shift and go to state 12
    bool                           shift and go to state 20
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 68

    (41) termo -> termo * fator .

    *               reduce using rule 41 (termo -> termo * fator .)
    /               reduce using rule 41 (termo -> termo * fator .)
    +               reduce using rule 41 (termo -> termo * fator .)
    -               reduce using rule 41 (termo -> termo * fator .)
    INF             reduce using rule 41 (termo -> termo * fator .)
    EQUAL           reduce using rule 41 (termo -> termo * fator .)
    INFEQ           reduce using rule 41 (termo -> termo * fator .)
    SUP             reduce using rule 41 (termo -> termo * fator .)
    SUPEQ           reduce using rule 41 (termo -> termo * fator .)
    E               reduce using rule 41 (termo -> termo * fator .)
    OU              reduce using rule 41 (termo -> termo * fator .)
    PRINT           reduce using rule 41 (termo -> termo * fator .)
    ID              reduce using rule 41 (termo -> termo * fator .)
    IF              reduce using rule 41 (termo -> termo * fator .)
    WHILE           reduce using rule 41 (termo -> termo * fator .)
    TRUE            reduce using rule 41 (termo -> termo * fator .)
    FALSE           reduce using rule 41 (termo -> termo * fator .)
    NUM             reduce using rule 41 (termo -> termo * fator .)
    (               reduce using rule 41 (termo -> termo * fator .)
    $end            reduce using rule 41 (termo -> termo * fator .)
    return          reduce using rule 41 (termo -> termo * fator .)
    ELSE            reduce using rule 41 (termo -> termo * fator .)
    FRASE           reduce using rule 41 (termo -> termo * fator .)
    .               reduce using rule 41 (termo -> termo * fator .)
    THEN            reduce using rule 41 (termo -> termo * fator .)
    DO              reduce using rule 41 (termo -> termo * fator .)
    )               reduce using rule 41 (termo -> termo * fator .)
    end             reduce using rule 41 (termo -> termo * fator .)


state 69

    (42) termo -> termo / fator .

    *               reduce using rule 42 (termo -> termo / fator .)
    /               reduce using rule 42 (termo -> termo / fator .)
    +               reduce using rule 42 (termo -> termo / fator .)
    -               reduce using rule 42 (termo -> termo / fator .)
    INF             reduce using rule 42 (termo -> termo / fator .)
    EQUAL           reduce using rule 42 (termo -> termo / fator .)
    INFEQ           reduce using rule 42 (termo -> termo / fator .)
    SUP             reduce using rule 42 (termo -> termo / fator .)
    SUPEQ           reduce using rule 42 (termo -> termo / fator .)
    E               reduce using rule 42 (termo -> termo / fator .)
    OU              reduce using rule 42 (termo -> termo / fator .)
    PRINT           reduce using rule 42 (termo -> termo / fator .)
    ID              reduce using rule 42 (termo -> termo / fator .)
    IF              reduce using rule 42 (termo -> termo / fator .)
    WHILE           reduce using rule 42 (termo -> termo / fator .)
    TRUE            reduce using rule 42 (termo -> termo / fator .)
    FALSE           reduce using rule 42 (termo -> termo / fator .)
    NUM             reduce using rule 42 (termo -> termo / fator .)
    (               reduce using rule 42 (termo -> termo / fator .)
    $end            reduce using rule 42 (termo -> termo / fator .)
    return          reduce using rule 42 (termo -> termo / fator .)
    ELSE            reduce using rule 42 (termo -> termo / fator .)
    FRASE           reduce using rule 42 (termo -> termo / fator .)
    .               reduce using rule 42 (termo -> termo / fator .)
    THEN            reduce using rule 42 (termo -> termo / fator .)
    DO              reduce using rule 42 (termo -> termo / fator .)
    )               reduce using rule 42 (termo -> termo / fator .)
    end             reduce using rule 42 (termo -> termo / fator .)


state 70

    (46) fator -> ( expr ) .

    *               reduce using rule 46 (fator -> ( expr ) .)
    /               reduce using rule 46 (fator -> ( expr ) .)
    +               reduce using rule 46 (fator -> ( expr ) .)
    -               reduce using rule 46 (fator -> ( expr ) .)
    INF             reduce using rule 46 (fator -> ( expr ) .)
    EQUAL           reduce using rule 46 (fator -> ( expr ) .)
    INFEQ           reduce using rule 46 (fator -> ( expr ) .)
    SUP             reduce using rule 46 (fator -> ( expr ) .)
    SUPEQ           reduce using rule 46 (fator -> ( expr ) .)
    E               reduce using rule 46 (fator -> ( expr ) .)
    OU              reduce using rule 46 (fator -> ( expr ) .)
    PRINT           reduce using rule 46 (fator -> ( expr ) .)
    ID              reduce using rule 46 (fator -> ( expr ) .)
    IF              reduce using rule 46 (fator -> ( expr ) .)
    WHILE           reduce using rule 46 (fator -> ( expr ) .)
    TRUE            reduce using rule 46 (fator -> ( expr ) .)
    FALSE           reduce using rule 46 (fator -> ( expr ) .)
    NUM             reduce using rule 46 (fator -> ( expr ) .)
    (               reduce using rule 46 (fator -> ( expr ) .)
    $end            reduce using rule 46 (fator -> ( expr ) .)
    return          reduce using rule 46 (fator -> ( expr ) .)
    ELSE            reduce using rule 46 (fator -> ( expr ) .)
    FRASE           reduce using rule 46 (fator -> ( expr ) .)
    .               reduce using rule 46 (fator -> ( expr ) .)
    THEN            reduce using rule 46 (fator -> ( expr ) .)
    DO              reduce using rule 46 (fator -> ( expr ) .)
    )               reduce using rule 46 (fator -> ( expr ) .)
    end             reduce using rule 46 (fator -> ( expr ) .)


state 71

    (14) var -> INT ID = expr . .

    INT             reduce using rule 14 (var -> INT ID = expr . .)
    ID              reduce using rule 14 (var -> INT ID = expr . .)
    PRINT           reduce using rule 14 (var -> INT ID = expr . .)
    IF              reduce using rule 14 (var -> INT ID = expr . .)
    WHILE           reduce using rule 14 (var -> INT ID = expr . .)
    TRUE            reduce using rule 14 (var -> INT ID = expr . .)
    FALSE           reduce using rule 14 (var -> INT ID = expr . .)
    NUM             reduce using rule 14 (var -> INT ID = expr . .)
    (               reduce using rule 14 (var -> INT ID = expr . .)
    $end            reduce using rule 14 (var -> INT ID = expr . .)


state 72

    (11) Func -> ID begin Cod return . expr end
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

    NUM             shift and go to state 27
    ID              shift and go to state 49
    (               shift and go to state 28

    expr                           shift and go to state 77
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 73

    (25) atr -> ID = expr . .

    PRINT           reduce using rule 25 (atr -> ID = expr . .)
    ID              reduce using rule 25 (atr -> ID = expr . .)
    IF              reduce using rule 25 (atr -> ID = expr . .)
    WHILE           reduce using rule 25 (atr -> ID = expr . .)
    TRUE            reduce using rule 25 (atr -> ID = expr . .)
    FALSE           reduce using rule 25 (atr -> ID = expr . .)
    NUM             reduce using rule 25 (atr -> ID = expr . .)
    (               reduce using rule 25 (atr -> ID = expr . .)
    $end            reduce using rule 25 (atr -> ID = expr . .)
    return          reduce using rule 25 (atr -> ID = expr . .)
    ELSE            reduce using rule 25 (atr -> ID = expr . .)


state 74

    (22) Ler -> ID = INPUT FRASE . .

    .               shift and go to state 78


state 75

    (21) SE -> IF cond THEN Cod . ELSE Cod

    ELSE            shift and go to state 79


state 76

    (24) Ciclo -> WHILE cond DO Cod .

    PRINT           reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    ID              reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    IF              reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    WHILE           reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    TRUE            reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    FALSE           reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    NUM             reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    (               reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    $end            reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    return          reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)
    ELSE            reduce using rule 24 (Ciclo -> WHILE cond DO Cod .)


state 77

    (11) Func -> ID begin Cod return expr . end
    (38) expr -> expr . + termo
    (39) expr -> expr . - termo

    end             shift and go to state 80
    +               shift and go to state 36
    -               shift and go to state 37


state 78

    (22) Ler -> ID = INPUT FRASE . .

    PRINT           reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    ID              reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    IF              reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    WHILE           reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    TRUE            reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    FALSE           reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    NUM             reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    (               reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    $end            reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    return          reduce using rule 22 (Ler -> ID = INPUT FRASE . .)
    ELSE            reduce using rule 22 (Ler -> ID = INPUT FRASE . .)


state 79

    (21) SE -> IF cond THEN Cod ELSE . Cod
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (20) Linha -> . SE
    (23) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (25) atr -> . ID = expr .
    (22) Ler -> . ID = INPUT FRASE .
    (28) cond -> . bool
    (29) cond -> . expr
    (35) cond -> . expr oprelacao expr
    (36) cond -> . cond E cond
    (37) cond -> . cond OU cond
    (21) SE -> . IF cond THEN Cod ELSE Cod
    (24) Ciclo -> . WHILE cond DO Cod
    (26) bool -> . TRUE
    (27) bool -> . FALSE
    (38) expr -> . expr + termo
    (39) expr -> . expr - termo
    (40) expr -> . termo
    (41) termo -> . termo * fator
    (42) termo -> . termo / fator
    (43) termo -> . fator
    (44) fator -> . NUM
    (45) fator -> . ID
    (46) fator -> . ( expr )

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 12 (Cod -> .)
    return          reduce using rule 12 (Cod -> .)
    ELSE            reduce using rule 12 (Cod -> .)
    PRINT           shift and go to state 19
    ID              shift and go to state 32
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    NUM             shift and go to state 27
    (               shift and go to state 28

  ! PRINT           [ reduce using rule 12 (Cod -> .) ]
  ! ID              [ reduce using rule 12 (Cod -> .) ]
  ! IF              [ reduce using rule 12 (Cod -> .) ]
  ! WHILE           [ reduce using rule 12 (Cod -> .) ]
  ! TRUE            [ reduce using rule 12 (Cod -> .) ]
  ! FALSE           [ reduce using rule 12 (Cod -> .) ]
  ! NUM             [ reduce using rule 12 (Cod -> .) ]
  ! (               [ reduce using rule 12 (Cod -> .) ]

    cond                           shift and go to state 16
    Cod                            shift and go to state 81
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    SE                             shift and go to state 17
    Ciclo                          shift and go to state 18
    expr                           shift and go to state 12
    bool                           shift and go to state 20
    termo                          shift and go to state 25
    fator                          shift and go to state 26

state 80

    (11) Func -> ID begin Cod return expr end .

    ID              reduce using rule 11 (Func -> ID begin Cod return expr end .)
    PRINT           reduce using rule 11 (Func -> ID begin Cod return expr end .)
    IF              reduce using rule 11 (Func -> ID begin Cod return expr end .)
    WHILE           reduce using rule 11 (Func -> ID begin Cod return expr end .)
    TRUE            reduce using rule 11 (Func -> ID begin Cod return expr end .)
    FALSE           reduce using rule 11 (Func -> ID begin Cod return expr end .)
    NUM             reduce using rule 11 (Func -> ID begin Cod return expr end .)
    (               reduce using rule 11 (Func -> ID begin Cod return expr end .)
    $end            reduce using rule 11 (Func -> ID begin Cod return expr end .)


state 81

    (21) SE -> IF cond THEN Cod ELSE Cod .

    PRINT           reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    ID              reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    IF              reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    WHILE           reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    TRUE            reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    FALSE           reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    NUM             reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    (               reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    $end            reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    return          reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)
    ELSE            reduce using rule 21 (SE -> IF cond THEN Cod ELSE Cod .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 10 resolved as shift
WARNING: shift/reduce conflict for ID in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 10 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 10 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 10 resolved as shift
WARNING: shift/reduce conflict for NUM in state 10 resolved as shift
WARNING: shift/reduce conflict for ( in state 10 resolved as shift
WARNING: shift/reduce conflict for E in state 62 resolved as shift
WARNING: shift/reduce conflict for OU in state 62 resolved as shift
WARNING: shift/reduce conflict for E in state 63 resolved as shift
WARNING: shift/reduce conflict for OU in state 63 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 67 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 67 resolved as shift
WARNING: shift/reduce conflict for NUM in state 67 resolved as shift
WARNING: shift/reduce conflict for ( in state 67 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for IF in state 79 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 79 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 79 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 79 resolved as shift
WARNING: shift/reduce conflict for NUM in state 79 resolved as shift
WARNING: shift/reduce conflict for ( in state 79 resolved as shift
