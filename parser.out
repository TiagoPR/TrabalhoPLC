Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    ELSE
    IF
    THEN
    WHILE

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> Vars Funcs Cod
Rule 2     corpoescreve -> <empty>
Rule 3     corpoescreve -> alter corpoescreve
Rule 4     alter -> FRASE
Rule 5     alter -> expr
Rule 6     Escrever -> PRINT corpoescreve .
Rule 7     Vars -> <empty>
Rule 8     Vars -> var Vars
Rule 9     Funcs -> <empty>
Rule 10    Funcs -> Funcs Func
Rule 11    Func -> ID begin Cod return expr end
Rule 12    Cod -> <empty>
Rule 13    var -> INT ID .
Rule 14    var -> INT ID = expr .
Rule 15    Cod -> Linha Cod
Rule 16    Linha -> Escrever
Rule 17    Linha -> atr
Rule 18    Linha -> Ler
Rule 19    Linha -> cond
Rule 20    Ler -> ID = INPUT FRASE .
Rule 21    bool -> TRUE
Rule 22    bool -> FALSE
Rule 23    cond -> bool
Rule 24    cond -> expr
Rule 25    oprelacao -> INF
Rule 26    oprelacao -> EQUAL
Rule 27    oprelacao -> INFEQ
Rule 28    oprelacao -> SUP
Rule 29    oprelacao -> SUPEQ
Rule 30    cond -> expr oprelacao expr
Rule 31    cond -> cond E cond
Rule 32    cond -> cond OU cond
Rule 33    expr -> expr + termo
Rule 34    expr -> expr - termo
Rule 35    expr -> termo
Rule 36    termo -> termo * fator
Rule 37    termo -> termo / fator
Rule 38    termo -> fator
Rule 39    fator -> NUM
Rule 40    fator -> ID
Rule 41    fator -> ( expr )
Rule 42    atr -> ID = expr .

Terminals, with rules where they appear

(                    : 41
)                    : 41
*                    : 36
+                    : 33
-                    : 34
.                    : 6 13 14 20 42
/                    : 37
=                    : 14 20 42
DO                   : 
E                    : 31
ELSE                 : 
EQUAL                : 26
FALSE                : 22
FRASE                : 4 20
ID                   : 11 13 14 20 40 42
IF                   : 
INF                  : 25
INFEQ                : 27
INPUT                : 20
INT                  : 13 14
NUM                  : 39
OU                   : 32
PRINT                : 6
SUP                  : 28
SUPEQ                : 29
THEN                 : 
TRUE                 : 21
WHILE                : 
begin                : 11
end                  : 11
error                : 
return               : 11

Nonterminals, with rules where they appear

Cod                  : 1 11 15
Escrever             : 16
Func                 : 10
Funcs                : 1 10
Ler                  : 18
Linha                : 15
Programa             : 0
Vars                 : 1 8
alter                : 3
atr                  : 17
bool                 : 23
cond                 : 19 31 31 32 32
corpoescreve         : 3 6
expr                 : 5 11 14 24 30 30 33 34 41 42
fator                : 36 37 38
oprelacao            : 30
termo                : 33 34 35 36 37
var                  : 8

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . Vars Funcs Cod
    (7) Vars -> .
    (8) Vars -> . var Vars
    (13) var -> . INT ID .
    (14) var -> . INT ID = expr .

    ID              reduce using rule 7 (Vars -> .)
    PRINT           reduce using rule 7 (Vars -> .)
    TRUE            reduce using rule 7 (Vars -> .)
    FALSE           reduce using rule 7 (Vars -> .)
    NUM             reduce using rule 7 (Vars -> .)
    (               reduce using rule 7 (Vars -> .)
    $end            reduce using rule 7 (Vars -> .)
    INT             shift and go to state 4

    Programa                       shift and go to state 1
    Vars                           shift and go to state 2
    var                            shift and go to state 3

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> Vars . Funcs Cod
    (9) Funcs -> .
    (10) Funcs -> . Funcs Func

    ID              reduce using rule 9 (Funcs -> .)
    PRINT           reduce using rule 9 (Funcs -> .)
    TRUE            reduce using rule 9 (Funcs -> .)
    FALSE           reduce using rule 9 (Funcs -> .)
    NUM             reduce using rule 9 (Funcs -> .)
    (               reduce using rule 9 (Funcs -> .)
    $end            reduce using rule 9 (Funcs -> .)

    Funcs                          shift and go to state 5

state 3

    (8) Vars -> var . Vars
    (7) Vars -> .
    (8) Vars -> . var Vars
    (13) var -> . INT ID .
    (14) var -> . INT ID = expr .

    ID              reduce using rule 7 (Vars -> .)
    PRINT           reduce using rule 7 (Vars -> .)
    TRUE            reduce using rule 7 (Vars -> .)
    FALSE           reduce using rule 7 (Vars -> .)
    NUM             reduce using rule 7 (Vars -> .)
    (               reduce using rule 7 (Vars -> .)
    $end            reduce using rule 7 (Vars -> .)
    INT             shift and go to state 4

    var                            shift and go to state 3
    Vars                           shift and go to state 6

state 4

    (13) var -> INT . ID .
    (14) var -> INT . ID = expr .

    ID              shift and go to state 7


state 5

    (1) Programa -> Vars Funcs . Cod
    (10) Funcs -> Funcs . Func
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (11) Func -> . ID begin Cod return expr end
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (6) Escrever -> . PRINT corpoescreve .
    (42) atr -> . ID = expr .
    (20) Ler -> . ID = INPUT FRASE .
    (23) cond -> . bool
    (24) cond -> . expr
    (30) cond -> . expr oprelacao expr
    (31) cond -> . cond E cond
    (32) cond -> . cond OU cond
    (21) bool -> . TRUE
    (22) bool -> . FALSE
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    $end            reduce using rule 12 (Cod -> .)
    ID              shift and go to state 11
    PRINT           shift and go to state 17
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    NUM             shift and go to state 23
    (               shift and go to state 24

    Cod                            shift and go to state 8
    Func                           shift and go to state 9
    Linha                          shift and go to state 10
    expr                           shift and go to state 12
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    cond                           shift and go to state 16
    bool                           shift and go to state 18
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 6

    (8) Vars -> var Vars .

    ID              reduce using rule 8 (Vars -> var Vars .)
    PRINT           reduce using rule 8 (Vars -> var Vars .)
    TRUE            reduce using rule 8 (Vars -> var Vars .)
    FALSE           reduce using rule 8 (Vars -> var Vars .)
    NUM             reduce using rule 8 (Vars -> var Vars .)
    (               reduce using rule 8 (Vars -> var Vars .)
    $end            reduce using rule 8 (Vars -> var Vars .)


state 7

    (13) var -> INT ID . .
    (14) var -> INT ID . = expr .

    .               shift and go to state 25
    =               shift and go to state 26


state 8

    (1) Programa -> Vars Funcs Cod .

    $end            reduce using rule 1 (Programa -> Vars Funcs Cod .)


state 9

    (10) Funcs -> Funcs Func .

    ID              reduce using rule 10 (Funcs -> Funcs Func .)
    PRINT           reduce using rule 10 (Funcs -> Funcs Func .)
    TRUE            reduce using rule 10 (Funcs -> Funcs Func .)
    FALSE           reduce using rule 10 (Funcs -> Funcs Func .)
    NUM             reduce using rule 10 (Funcs -> Funcs Func .)
    (               reduce using rule 10 (Funcs -> Funcs Func .)
    $end            reduce using rule 10 (Funcs -> Funcs Func .)


state 10

    (15) Cod -> Linha . Cod
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (6) Escrever -> . PRINT corpoescreve .
    (42) atr -> . ID = expr .
    (20) Ler -> . ID = INPUT FRASE .
    (23) cond -> . bool
    (24) cond -> . expr
    (30) cond -> . expr oprelacao expr
    (31) cond -> . cond E cond
    (32) cond -> . cond OU cond
    (21) bool -> . TRUE
    (22) bool -> . FALSE
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    $end            reduce using rule 12 (Cod -> .)
    return          reduce using rule 12 (Cod -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 28
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    NUM             shift and go to state 23
    (               shift and go to state 24

    Linha                          shift and go to state 10
    Cod                            shift and go to state 27
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    cond                           shift and go to state 16
    expr                           shift and go to state 12
    bool                           shift and go to state 18
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 11

    (11) Func -> ID . begin Cod return expr end
    (42) atr -> ID . = expr .
    (20) Ler -> ID . = INPUT FRASE .
    (40) fator -> ID .

    begin           shift and go to state 29
    =               shift and go to state 30
    *               reduce using rule 40 (fator -> ID .)
    /               reduce using rule 40 (fator -> ID .)
    +               reduce using rule 40 (fator -> ID .)
    -               reduce using rule 40 (fator -> ID .)
    INF             reduce using rule 40 (fator -> ID .)
    EQUAL           reduce using rule 40 (fator -> ID .)
    INFEQ           reduce using rule 40 (fator -> ID .)
    SUP             reduce using rule 40 (fator -> ID .)
    SUPEQ           reduce using rule 40 (fator -> ID .)
    E               reduce using rule 40 (fator -> ID .)
    OU              reduce using rule 40 (fator -> ID .)
    PRINT           reduce using rule 40 (fator -> ID .)
    ID              reduce using rule 40 (fator -> ID .)
    TRUE            reduce using rule 40 (fator -> ID .)
    FALSE           reduce using rule 40 (fator -> ID .)
    NUM             reduce using rule 40 (fator -> ID .)
    (               reduce using rule 40 (fator -> ID .)
    $end            reduce using rule 40 (fator -> ID .)


state 12

    (24) cond -> expr .
    (30) cond -> expr . oprelacao expr
    (33) expr -> expr . + termo
    (34) expr -> expr . - termo
    (25) oprelacao -> . INF
    (26) oprelacao -> . EQUAL
    (27) oprelacao -> . INFEQ
    (28) oprelacao -> . SUP
    (29) oprelacao -> . SUPEQ

    E               reduce using rule 24 (cond -> expr .)
    OU              reduce using rule 24 (cond -> expr .)
    PRINT           reduce using rule 24 (cond -> expr .)
    ID              reduce using rule 24 (cond -> expr .)
    TRUE            reduce using rule 24 (cond -> expr .)
    FALSE           reduce using rule 24 (cond -> expr .)
    NUM             reduce using rule 24 (cond -> expr .)
    (               reduce using rule 24 (cond -> expr .)
    $end            reduce using rule 24 (cond -> expr .)
    return          reduce using rule 24 (cond -> expr .)
    +               shift and go to state 32
    -               shift and go to state 33
    INF             shift and go to state 34
    EQUAL           shift and go to state 35
    INFEQ           shift and go to state 36
    SUP             shift and go to state 37
    SUPEQ           shift and go to state 38

    oprelacao                      shift and go to state 31

state 13

    (16) Linha -> Escrever .

    PRINT           reduce using rule 16 (Linha -> Escrever .)
    ID              reduce using rule 16 (Linha -> Escrever .)
    TRUE            reduce using rule 16 (Linha -> Escrever .)
    FALSE           reduce using rule 16 (Linha -> Escrever .)
    NUM             reduce using rule 16 (Linha -> Escrever .)
    (               reduce using rule 16 (Linha -> Escrever .)
    $end            reduce using rule 16 (Linha -> Escrever .)
    return          reduce using rule 16 (Linha -> Escrever .)


state 14

    (17) Linha -> atr .

    PRINT           reduce using rule 17 (Linha -> atr .)
    ID              reduce using rule 17 (Linha -> atr .)
    TRUE            reduce using rule 17 (Linha -> atr .)
    FALSE           reduce using rule 17 (Linha -> atr .)
    NUM             reduce using rule 17 (Linha -> atr .)
    (               reduce using rule 17 (Linha -> atr .)
    $end            reduce using rule 17 (Linha -> atr .)
    return          reduce using rule 17 (Linha -> atr .)


state 15

    (18) Linha -> Ler .

    PRINT           reduce using rule 18 (Linha -> Ler .)
    ID              reduce using rule 18 (Linha -> Ler .)
    TRUE            reduce using rule 18 (Linha -> Ler .)
    FALSE           reduce using rule 18 (Linha -> Ler .)
    NUM             reduce using rule 18 (Linha -> Ler .)
    (               reduce using rule 18 (Linha -> Ler .)
    $end            reduce using rule 18 (Linha -> Ler .)
    return          reduce using rule 18 (Linha -> Ler .)


state 16

    (19) Linha -> cond .
    (31) cond -> cond . E cond
    (32) cond -> cond . OU cond

    PRINT           reduce using rule 19 (Linha -> cond .)
    ID              reduce using rule 19 (Linha -> cond .)
    TRUE            reduce using rule 19 (Linha -> cond .)
    FALSE           reduce using rule 19 (Linha -> cond .)
    NUM             reduce using rule 19 (Linha -> cond .)
    (               reduce using rule 19 (Linha -> cond .)
    $end            reduce using rule 19 (Linha -> cond .)
    return          reduce using rule 19 (Linha -> cond .)
    E               shift and go to state 39
    OU              shift and go to state 40


state 17

    (6) Escrever -> PRINT . corpoescreve .
    (2) corpoescreve -> .
    (3) corpoescreve -> . alter corpoescreve
    (4) alter -> . FRASE
    (5) alter -> . expr
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    .               reduce using rule 2 (corpoescreve -> .)
    FRASE           shift and go to state 43
    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    corpoescreve                   shift and go to state 41
    alter                          shift and go to state 42
    expr                           shift and go to state 44
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 18

    (23) cond -> bool .

    E               reduce using rule 23 (cond -> bool .)
    OU              reduce using rule 23 (cond -> bool .)
    PRINT           reduce using rule 23 (cond -> bool .)
    ID              reduce using rule 23 (cond -> bool .)
    TRUE            reduce using rule 23 (cond -> bool .)
    FALSE           reduce using rule 23 (cond -> bool .)
    NUM             reduce using rule 23 (cond -> bool .)
    (               reduce using rule 23 (cond -> bool .)
    $end            reduce using rule 23 (cond -> bool .)
    return          reduce using rule 23 (cond -> bool .)


state 19

    (21) bool -> TRUE .

    E               reduce using rule 21 (bool -> TRUE .)
    OU              reduce using rule 21 (bool -> TRUE .)
    PRINT           reduce using rule 21 (bool -> TRUE .)
    ID              reduce using rule 21 (bool -> TRUE .)
    TRUE            reduce using rule 21 (bool -> TRUE .)
    FALSE           reduce using rule 21 (bool -> TRUE .)
    NUM             reduce using rule 21 (bool -> TRUE .)
    (               reduce using rule 21 (bool -> TRUE .)
    $end            reduce using rule 21 (bool -> TRUE .)
    return          reduce using rule 21 (bool -> TRUE .)


state 20

    (22) bool -> FALSE .

    E               reduce using rule 22 (bool -> FALSE .)
    OU              reduce using rule 22 (bool -> FALSE .)
    PRINT           reduce using rule 22 (bool -> FALSE .)
    ID              reduce using rule 22 (bool -> FALSE .)
    TRUE            reduce using rule 22 (bool -> FALSE .)
    FALSE           reduce using rule 22 (bool -> FALSE .)
    NUM             reduce using rule 22 (bool -> FALSE .)
    (               reduce using rule 22 (bool -> FALSE .)
    $end            reduce using rule 22 (bool -> FALSE .)
    return          reduce using rule 22 (bool -> FALSE .)


state 21

    (35) expr -> termo .
    (36) termo -> termo . * fator
    (37) termo -> termo . / fator

    +               reduce using rule 35 (expr -> termo .)
    -               reduce using rule 35 (expr -> termo .)
    INF             reduce using rule 35 (expr -> termo .)
    EQUAL           reduce using rule 35 (expr -> termo .)
    INFEQ           reduce using rule 35 (expr -> termo .)
    SUP             reduce using rule 35 (expr -> termo .)
    SUPEQ           reduce using rule 35 (expr -> termo .)
    E               reduce using rule 35 (expr -> termo .)
    OU              reduce using rule 35 (expr -> termo .)
    PRINT           reduce using rule 35 (expr -> termo .)
    ID              reduce using rule 35 (expr -> termo .)
    TRUE            reduce using rule 35 (expr -> termo .)
    FALSE           reduce using rule 35 (expr -> termo .)
    NUM             reduce using rule 35 (expr -> termo .)
    (               reduce using rule 35 (expr -> termo .)
    $end            reduce using rule 35 (expr -> termo .)
    return          reduce using rule 35 (expr -> termo .)
    FRASE           reduce using rule 35 (expr -> termo .)
    .               reduce using rule 35 (expr -> termo .)
    )               reduce using rule 35 (expr -> termo .)
    end             reduce using rule 35 (expr -> termo .)
    *               shift and go to state 46
    /               shift and go to state 47


state 22

    (38) termo -> fator .

    *               reduce using rule 38 (termo -> fator .)
    /               reduce using rule 38 (termo -> fator .)
    +               reduce using rule 38 (termo -> fator .)
    -               reduce using rule 38 (termo -> fator .)
    INF             reduce using rule 38 (termo -> fator .)
    EQUAL           reduce using rule 38 (termo -> fator .)
    INFEQ           reduce using rule 38 (termo -> fator .)
    SUP             reduce using rule 38 (termo -> fator .)
    SUPEQ           reduce using rule 38 (termo -> fator .)
    E               reduce using rule 38 (termo -> fator .)
    OU              reduce using rule 38 (termo -> fator .)
    PRINT           reduce using rule 38 (termo -> fator .)
    ID              reduce using rule 38 (termo -> fator .)
    TRUE            reduce using rule 38 (termo -> fator .)
    FALSE           reduce using rule 38 (termo -> fator .)
    NUM             reduce using rule 38 (termo -> fator .)
    (               reduce using rule 38 (termo -> fator .)
    $end            reduce using rule 38 (termo -> fator .)
    return          reduce using rule 38 (termo -> fator .)
    FRASE           reduce using rule 38 (termo -> fator .)
    .               reduce using rule 38 (termo -> fator .)
    )               reduce using rule 38 (termo -> fator .)
    end             reduce using rule 38 (termo -> fator .)


state 23

    (39) fator -> NUM .

    *               reduce using rule 39 (fator -> NUM .)
    /               reduce using rule 39 (fator -> NUM .)
    +               reduce using rule 39 (fator -> NUM .)
    -               reduce using rule 39 (fator -> NUM .)
    INF             reduce using rule 39 (fator -> NUM .)
    EQUAL           reduce using rule 39 (fator -> NUM .)
    INFEQ           reduce using rule 39 (fator -> NUM .)
    SUP             reduce using rule 39 (fator -> NUM .)
    SUPEQ           reduce using rule 39 (fator -> NUM .)
    E               reduce using rule 39 (fator -> NUM .)
    OU              reduce using rule 39 (fator -> NUM .)
    PRINT           reduce using rule 39 (fator -> NUM .)
    ID              reduce using rule 39 (fator -> NUM .)
    TRUE            reduce using rule 39 (fator -> NUM .)
    FALSE           reduce using rule 39 (fator -> NUM .)
    NUM             reduce using rule 39 (fator -> NUM .)
    (               reduce using rule 39 (fator -> NUM .)
    $end            reduce using rule 39 (fator -> NUM .)
    return          reduce using rule 39 (fator -> NUM .)
    FRASE           reduce using rule 39 (fator -> NUM .)
    .               reduce using rule 39 (fator -> NUM .)
    )               reduce using rule 39 (fator -> NUM .)
    end             reduce using rule 39 (fator -> NUM .)


state 24

    (41) fator -> ( . expr )
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    expr                           shift and go to state 48
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 25

    (13) var -> INT ID . .

    INT             reduce using rule 13 (var -> INT ID . .)
    ID              reduce using rule 13 (var -> INT ID . .)
    PRINT           reduce using rule 13 (var -> INT ID . .)
    TRUE            reduce using rule 13 (var -> INT ID . .)
    FALSE           reduce using rule 13 (var -> INT ID . .)
    NUM             reduce using rule 13 (var -> INT ID . .)
    (               reduce using rule 13 (var -> INT ID . .)
    $end            reduce using rule 13 (var -> INT ID . .)


state 26

    (14) var -> INT ID = . expr .
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    expr                           shift and go to state 49
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 27

    (15) Cod -> Linha Cod .

    $end            reduce using rule 15 (Cod -> Linha Cod .)
    return          reduce using rule 15 (Cod -> Linha Cod .)


state 28

    (42) atr -> ID . = expr .
    (20) Ler -> ID . = INPUT FRASE .
    (40) fator -> ID .

    =               shift and go to state 30
    *               reduce using rule 40 (fator -> ID .)
    /               reduce using rule 40 (fator -> ID .)
    +               reduce using rule 40 (fator -> ID .)
    -               reduce using rule 40 (fator -> ID .)
    INF             reduce using rule 40 (fator -> ID .)
    EQUAL           reduce using rule 40 (fator -> ID .)
    INFEQ           reduce using rule 40 (fator -> ID .)
    SUP             reduce using rule 40 (fator -> ID .)
    SUPEQ           reduce using rule 40 (fator -> ID .)
    E               reduce using rule 40 (fator -> ID .)
    OU              reduce using rule 40 (fator -> ID .)
    PRINT           reduce using rule 40 (fator -> ID .)
    ID              reduce using rule 40 (fator -> ID .)
    TRUE            reduce using rule 40 (fator -> ID .)
    FALSE           reduce using rule 40 (fator -> ID .)
    NUM             reduce using rule 40 (fator -> ID .)
    (               reduce using rule 40 (fator -> ID .)
    $end            reduce using rule 40 (fator -> ID .)
    return          reduce using rule 40 (fator -> ID .)


state 29

    (11) Func -> ID begin . Cod return expr end
    (12) Cod -> .
    (15) Cod -> . Linha Cod
    (16) Linha -> . Escrever
    (17) Linha -> . atr
    (18) Linha -> . Ler
    (19) Linha -> . cond
    (6) Escrever -> . PRINT corpoescreve .
    (42) atr -> . ID = expr .
    (20) Ler -> . ID = INPUT FRASE .
    (23) cond -> . bool
    (24) cond -> . expr
    (30) cond -> . expr oprelacao expr
    (31) cond -> . cond E cond
    (32) cond -> . cond OU cond
    (21) bool -> . TRUE
    (22) bool -> . FALSE
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    return          reduce using rule 12 (Cod -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 28
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    NUM             shift and go to state 23
    (               shift and go to state 24

    Cod                            shift and go to state 50
    expr                           shift and go to state 12
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 15
    cond                           shift and go to state 16
    bool                           shift and go to state 18
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 30

    (42) atr -> ID = . expr .
    (20) Ler -> ID = . INPUT FRASE .
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    INPUT           shift and go to state 52
    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    expr                           shift and go to state 51
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 31

    (30) cond -> expr oprelacao . expr
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    expr                           shift and go to state 53
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 32

    (33) expr -> expr + . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    termo                          shift and go to state 54
    fator                          shift and go to state 22

state 33

    (34) expr -> expr - . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    termo                          shift and go to state 55
    fator                          shift and go to state 22

state 34

    (25) oprelacao -> INF .

    NUM             reduce using rule 25 (oprelacao -> INF .)
    ID              reduce using rule 25 (oprelacao -> INF .)
    (               reduce using rule 25 (oprelacao -> INF .)


state 35

    (26) oprelacao -> EQUAL .

    NUM             reduce using rule 26 (oprelacao -> EQUAL .)
    ID              reduce using rule 26 (oprelacao -> EQUAL .)
    (               reduce using rule 26 (oprelacao -> EQUAL .)


state 36

    (27) oprelacao -> INFEQ .

    NUM             reduce using rule 27 (oprelacao -> INFEQ .)
    ID              reduce using rule 27 (oprelacao -> INFEQ .)
    (               reduce using rule 27 (oprelacao -> INFEQ .)


state 37

    (28) oprelacao -> SUP .

    NUM             reduce using rule 28 (oprelacao -> SUP .)
    ID              reduce using rule 28 (oprelacao -> SUP .)
    (               reduce using rule 28 (oprelacao -> SUP .)


state 38

    (29) oprelacao -> SUPEQ .

    NUM             reduce using rule 29 (oprelacao -> SUPEQ .)
    ID              reduce using rule 29 (oprelacao -> SUPEQ .)
    (               reduce using rule 29 (oprelacao -> SUPEQ .)


state 39

    (31) cond -> cond E . cond
    (23) cond -> . bool
    (24) cond -> . expr
    (30) cond -> . expr oprelacao expr
    (31) cond -> . cond E cond
    (32) cond -> . cond OU cond
    (21) bool -> . TRUE
    (22) bool -> . FALSE
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    cond                           shift and go to state 56
    bool                           shift and go to state 18
    expr                           shift and go to state 12
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 40

    (32) cond -> cond OU . cond
    (23) cond -> . bool
    (24) cond -> . expr
    (30) cond -> . expr oprelacao expr
    (31) cond -> . cond E cond
    (32) cond -> . cond OU cond
    (21) bool -> . TRUE
    (22) bool -> . FALSE
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    cond                           shift and go to state 57
    bool                           shift and go to state 18
    expr                           shift and go to state 12
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 41

    (6) Escrever -> PRINT corpoescreve . .

    .               shift and go to state 58


state 42

    (3) corpoescreve -> alter . corpoescreve
    (2) corpoescreve -> .
    (3) corpoescreve -> . alter corpoescreve
    (4) alter -> . FRASE
    (5) alter -> . expr
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    .               reduce using rule 2 (corpoescreve -> .)
    FRASE           shift and go to state 43
    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    alter                          shift and go to state 42
    corpoescreve                   shift and go to state 59
    expr                           shift and go to state 44
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 43

    (4) alter -> FRASE .

    FRASE           reduce using rule 4 (alter -> FRASE .)
    NUM             reduce using rule 4 (alter -> FRASE .)
    ID              reduce using rule 4 (alter -> FRASE .)
    (               reduce using rule 4 (alter -> FRASE .)
    .               reduce using rule 4 (alter -> FRASE .)


state 44

    (5) alter -> expr .
    (33) expr -> expr . + termo
    (34) expr -> expr . - termo

    FRASE           reduce using rule 5 (alter -> expr .)
    NUM             reduce using rule 5 (alter -> expr .)
    ID              reduce using rule 5 (alter -> expr .)
    (               reduce using rule 5 (alter -> expr .)
    .               reduce using rule 5 (alter -> expr .)
    +               shift and go to state 32
    -               shift and go to state 33


state 45

    (40) fator -> ID .

    *               reduce using rule 40 (fator -> ID .)
    /               reduce using rule 40 (fator -> ID .)
    +               reduce using rule 40 (fator -> ID .)
    -               reduce using rule 40 (fator -> ID .)
    FRASE           reduce using rule 40 (fator -> ID .)
    NUM             reduce using rule 40 (fator -> ID .)
    ID              reduce using rule 40 (fator -> ID .)
    (               reduce using rule 40 (fator -> ID .)
    .               reduce using rule 40 (fator -> ID .)
    )               reduce using rule 40 (fator -> ID .)
    E               reduce using rule 40 (fator -> ID .)
    OU              reduce using rule 40 (fator -> ID .)
    PRINT           reduce using rule 40 (fator -> ID .)
    TRUE            reduce using rule 40 (fator -> ID .)
    FALSE           reduce using rule 40 (fator -> ID .)
    $end            reduce using rule 40 (fator -> ID .)
    return          reduce using rule 40 (fator -> ID .)
    INF             reduce using rule 40 (fator -> ID .)
    EQUAL           reduce using rule 40 (fator -> ID .)
    INFEQ           reduce using rule 40 (fator -> ID .)
    SUP             reduce using rule 40 (fator -> ID .)
    SUPEQ           reduce using rule 40 (fator -> ID .)
    end             reduce using rule 40 (fator -> ID .)


state 46

    (36) termo -> termo * . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    fator                          shift and go to state 60

state 47

    (37) termo -> termo / . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    fator                          shift and go to state 61

state 48

    (41) fator -> ( expr . )
    (33) expr -> expr . + termo
    (34) expr -> expr . - termo

    )               shift and go to state 62
    +               shift and go to state 32
    -               shift and go to state 33


state 49

    (14) var -> INT ID = expr . .
    (33) expr -> expr . + termo
    (34) expr -> expr . - termo

    .               shift and go to state 63
    +               shift and go to state 32
    -               shift and go to state 33


state 50

    (11) Func -> ID begin Cod . return expr end

    return          shift and go to state 64


state 51

    (42) atr -> ID = expr . .
    (33) expr -> expr . + termo
    (34) expr -> expr . - termo

    .               shift and go to state 65
    +               shift and go to state 32
    -               shift and go to state 33


state 52

    (20) Ler -> ID = INPUT . FRASE .

    FRASE           shift and go to state 66


state 53

    (30) cond -> expr oprelacao expr .
    (33) expr -> expr . + termo
    (34) expr -> expr . - termo

    E               reduce using rule 30 (cond -> expr oprelacao expr .)
    OU              reduce using rule 30 (cond -> expr oprelacao expr .)
    PRINT           reduce using rule 30 (cond -> expr oprelacao expr .)
    ID              reduce using rule 30 (cond -> expr oprelacao expr .)
    TRUE            reduce using rule 30 (cond -> expr oprelacao expr .)
    FALSE           reduce using rule 30 (cond -> expr oprelacao expr .)
    NUM             reduce using rule 30 (cond -> expr oprelacao expr .)
    (               reduce using rule 30 (cond -> expr oprelacao expr .)
    $end            reduce using rule 30 (cond -> expr oprelacao expr .)
    return          reduce using rule 30 (cond -> expr oprelacao expr .)
    +               shift and go to state 32
    -               shift and go to state 33


state 54

    (33) expr -> expr + termo .
    (36) termo -> termo . * fator
    (37) termo -> termo . / fator

    +               reduce using rule 33 (expr -> expr + termo .)
    -               reduce using rule 33 (expr -> expr + termo .)
    INF             reduce using rule 33 (expr -> expr + termo .)
    EQUAL           reduce using rule 33 (expr -> expr + termo .)
    INFEQ           reduce using rule 33 (expr -> expr + termo .)
    SUP             reduce using rule 33 (expr -> expr + termo .)
    SUPEQ           reduce using rule 33 (expr -> expr + termo .)
    E               reduce using rule 33 (expr -> expr + termo .)
    OU              reduce using rule 33 (expr -> expr + termo .)
    PRINT           reduce using rule 33 (expr -> expr + termo .)
    ID              reduce using rule 33 (expr -> expr + termo .)
    TRUE            reduce using rule 33 (expr -> expr + termo .)
    FALSE           reduce using rule 33 (expr -> expr + termo .)
    NUM             reduce using rule 33 (expr -> expr + termo .)
    (               reduce using rule 33 (expr -> expr + termo .)
    $end            reduce using rule 33 (expr -> expr + termo .)
    return          reduce using rule 33 (expr -> expr + termo .)
    FRASE           reduce using rule 33 (expr -> expr + termo .)
    .               reduce using rule 33 (expr -> expr + termo .)
    )               reduce using rule 33 (expr -> expr + termo .)
    end             reduce using rule 33 (expr -> expr + termo .)
    *               shift and go to state 46
    /               shift and go to state 47


state 55

    (34) expr -> expr - termo .
    (36) termo -> termo . * fator
    (37) termo -> termo . / fator

    +               reduce using rule 34 (expr -> expr - termo .)
    -               reduce using rule 34 (expr -> expr - termo .)
    INF             reduce using rule 34 (expr -> expr - termo .)
    EQUAL           reduce using rule 34 (expr -> expr - termo .)
    INFEQ           reduce using rule 34 (expr -> expr - termo .)
    SUP             reduce using rule 34 (expr -> expr - termo .)
    SUPEQ           reduce using rule 34 (expr -> expr - termo .)
    E               reduce using rule 34 (expr -> expr - termo .)
    OU              reduce using rule 34 (expr -> expr - termo .)
    PRINT           reduce using rule 34 (expr -> expr - termo .)
    ID              reduce using rule 34 (expr -> expr - termo .)
    TRUE            reduce using rule 34 (expr -> expr - termo .)
    FALSE           reduce using rule 34 (expr -> expr - termo .)
    NUM             reduce using rule 34 (expr -> expr - termo .)
    (               reduce using rule 34 (expr -> expr - termo .)
    $end            reduce using rule 34 (expr -> expr - termo .)
    return          reduce using rule 34 (expr -> expr - termo .)
    FRASE           reduce using rule 34 (expr -> expr - termo .)
    .               reduce using rule 34 (expr -> expr - termo .)
    )               reduce using rule 34 (expr -> expr - termo .)
    end             reduce using rule 34 (expr -> expr - termo .)
    *               shift and go to state 46
    /               shift and go to state 47


state 56

    (31) cond -> cond E cond .
    (31) cond -> cond . E cond
    (32) cond -> cond . OU cond

  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
    PRINT           reduce using rule 31 (cond -> cond E cond .)
    ID              reduce using rule 31 (cond -> cond E cond .)
    TRUE            reduce using rule 31 (cond -> cond E cond .)
    FALSE           reduce using rule 31 (cond -> cond E cond .)
    NUM             reduce using rule 31 (cond -> cond E cond .)
    (               reduce using rule 31 (cond -> cond E cond .)
    $end            reduce using rule 31 (cond -> cond E cond .)
    return          reduce using rule 31 (cond -> cond E cond .)
    E               shift and go to state 39
    OU              shift and go to state 40

  ! E               [ reduce using rule 31 (cond -> cond E cond .) ]
  ! OU              [ reduce using rule 31 (cond -> cond E cond .) ]


state 57

    (32) cond -> cond OU cond .
    (31) cond -> cond . E cond
    (32) cond -> cond . OU cond

  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
    PRINT           reduce using rule 32 (cond -> cond OU cond .)
    ID              reduce using rule 32 (cond -> cond OU cond .)
    TRUE            reduce using rule 32 (cond -> cond OU cond .)
    FALSE           reduce using rule 32 (cond -> cond OU cond .)
    NUM             reduce using rule 32 (cond -> cond OU cond .)
    (               reduce using rule 32 (cond -> cond OU cond .)
    $end            reduce using rule 32 (cond -> cond OU cond .)
    return          reduce using rule 32 (cond -> cond OU cond .)
    E               shift and go to state 39
    OU              shift and go to state 40

  ! E               [ reduce using rule 32 (cond -> cond OU cond .) ]
  ! OU              [ reduce using rule 32 (cond -> cond OU cond .) ]


state 58

    (6) Escrever -> PRINT corpoescreve . .

    PRINT           reduce using rule 6 (Escrever -> PRINT corpoescreve . .)
    ID              reduce using rule 6 (Escrever -> PRINT corpoescreve . .)
    TRUE            reduce using rule 6 (Escrever -> PRINT corpoescreve . .)
    FALSE           reduce using rule 6 (Escrever -> PRINT corpoescreve . .)
    NUM             reduce using rule 6 (Escrever -> PRINT corpoescreve . .)
    (               reduce using rule 6 (Escrever -> PRINT corpoescreve . .)
    $end            reduce using rule 6 (Escrever -> PRINT corpoescreve . .)
    return          reduce using rule 6 (Escrever -> PRINT corpoescreve . .)


state 59

    (3) corpoescreve -> alter corpoescreve .

    .               reduce using rule 3 (corpoescreve -> alter corpoescreve .)


state 60

    (36) termo -> termo * fator .

    *               reduce using rule 36 (termo -> termo * fator .)
    /               reduce using rule 36 (termo -> termo * fator .)
    +               reduce using rule 36 (termo -> termo * fator .)
    -               reduce using rule 36 (termo -> termo * fator .)
    INF             reduce using rule 36 (termo -> termo * fator .)
    EQUAL           reduce using rule 36 (termo -> termo * fator .)
    INFEQ           reduce using rule 36 (termo -> termo * fator .)
    SUP             reduce using rule 36 (termo -> termo * fator .)
    SUPEQ           reduce using rule 36 (termo -> termo * fator .)
    E               reduce using rule 36 (termo -> termo * fator .)
    OU              reduce using rule 36 (termo -> termo * fator .)
    PRINT           reduce using rule 36 (termo -> termo * fator .)
    ID              reduce using rule 36 (termo -> termo * fator .)
    TRUE            reduce using rule 36 (termo -> termo * fator .)
    FALSE           reduce using rule 36 (termo -> termo * fator .)
    NUM             reduce using rule 36 (termo -> termo * fator .)
    (               reduce using rule 36 (termo -> termo * fator .)
    $end            reduce using rule 36 (termo -> termo * fator .)
    return          reduce using rule 36 (termo -> termo * fator .)
    FRASE           reduce using rule 36 (termo -> termo * fator .)
    .               reduce using rule 36 (termo -> termo * fator .)
    )               reduce using rule 36 (termo -> termo * fator .)
    end             reduce using rule 36 (termo -> termo * fator .)


state 61

    (37) termo -> termo / fator .

    *               reduce using rule 37 (termo -> termo / fator .)
    /               reduce using rule 37 (termo -> termo / fator .)
    +               reduce using rule 37 (termo -> termo / fator .)
    -               reduce using rule 37 (termo -> termo / fator .)
    INF             reduce using rule 37 (termo -> termo / fator .)
    EQUAL           reduce using rule 37 (termo -> termo / fator .)
    INFEQ           reduce using rule 37 (termo -> termo / fator .)
    SUP             reduce using rule 37 (termo -> termo / fator .)
    SUPEQ           reduce using rule 37 (termo -> termo / fator .)
    E               reduce using rule 37 (termo -> termo / fator .)
    OU              reduce using rule 37 (termo -> termo / fator .)
    PRINT           reduce using rule 37 (termo -> termo / fator .)
    ID              reduce using rule 37 (termo -> termo / fator .)
    TRUE            reduce using rule 37 (termo -> termo / fator .)
    FALSE           reduce using rule 37 (termo -> termo / fator .)
    NUM             reduce using rule 37 (termo -> termo / fator .)
    (               reduce using rule 37 (termo -> termo / fator .)
    $end            reduce using rule 37 (termo -> termo / fator .)
    return          reduce using rule 37 (termo -> termo / fator .)
    FRASE           reduce using rule 37 (termo -> termo / fator .)
    .               reduce using rule 37 (termo -> termo / fator .)
    )               reduce using rule 37 (termo -> termo / fator .)
    end             reduce using rule 37 (termo -> termo / fator .)


state 62

    (41) fator -> ( expr ) .

    *               reduce using rule 41 (fator -> ( expr ) .)
    /               reduce using rule 41 (fator -> ( expr ) .)
    +               reduce using rule 41 (fator -> ( expr ) .)
    -               reduce using rule 41 (fator -> ( expr ) .)
    INF             reduce using rule 41 (fator -> ( expr ) .)
    EQUAL           reduce using rule 41 (fator -> ( expr ) .)
    INFEQ           reduce using rule 41 (fator -> ( expr ) .)
    SUP             reduce using rule 41 (fator -> ( expr ) .)
    SUPEQ           reduce using rule 41 (fator -> ( expr ) .)
    E               reduce using rule 41 (fator -> ( expr ) .)
    OU              reduce using rule 41 (fator -> ( expr ) .)
    PRINT           reduce using rule 41 (fator -> ( expr ) .)
    ID              reduce using rule 41 (fator -> ( expr ) .)
    TRUE            reduce using rule 41 (fator -> ( expr ) .)
    FALSE           reduce using rule 41 (fator -> ( expr ) .)
    NUM             reduce using rule 41 (fator -> ( expr ) .)
    (               reduce using rule 41 (fator -> ( expr ) .)
    $end            reduce using rule 41 (fator -> ( expr ) .)
    return          reduce using rule 41 (fator -> ( expr ) .)
    FRASE           reduce using rule 41 (fator -> ( expr ) .)
    .               reduce using rule 41 (fator -> ( expr ) .)
    )               reduce using rule 41 (fator -> ( expr ) .)
    end             reduce using rule 41 (fator -> ( expr ) .)


state 63

    (14) var -> INT ID = expr . .

    INT             reduce using rule 14 (var -> INT ID = expr . .)
    ID              reduce using rule 14 (var -> INT ID = expr . .)
    PRINT           reduce using rule 14 (var -> INT ID = expr . .)
    TRUE            reduce using rule 14 (var -> INT ID = expr . .)
    FALSE           reduce using rule 14 (var -> INT ID = expr . .)
    NUM             reduce using rule 14 (var -> INT ID = expr . .)
    (               reduce using rule 14 (var -> INT ID = expr . .)
    $end            reduce using rule 14 (var -> INT ID = expr . .)


state 64

    (11) Func -> ID begin Cod return . expr end
    (33) expr -> . expr + termo
    (34) expr -> . expr - termo
    (35) expr -> . termo
    (36) termo -> . termo * fator
    (37) termo -> . termo / fator
    (38) termo -> . fator
    (39) fator -> . NUM
    (40) fator -> . ID
    (41) fator -> . ( expr )

    NUM             shift and go to state 23
    ID              shift and go to state 45
    (               shift and go to state 24

    expr                           shift and go to state 67
    termo                          shift and go to state 21
    fator                          shift and go to state 22

state 65

    (42) atr -> ID = expr . .

    PRINT           reduce using rule 42 (atr -> ID = expr . .)
    ID              reduce using rule 42 (atr -> ID = expr . .)
    TRUE            reduce using rule 42 (atr -> ID = expr . .)
    FALSE           reduce using rule 42 (atr -> ID = expr . .)
    NUM             reduce using rule 42 (atr -> ID = expr . .)
    (               reduce using rule 42 (atr -> ID = expr . .)
    $end            reduce using rule 42 (atr -> ID = expr . .)
    return          reduce using rule 42 (atr -> ID = expr . .)


state 66

    (20) Ler -> ID = INPUT FRASE . .

    .               shift and go to state 68


state 67

    (11) Func -> ID begin Cod return expr . end
    (33) expr -> expr . + termo
    (34) expr -> expr . - termo

    end             shift and go to state 69
    +               shift and go to state 32
    -               shift and go to state 33


state 68

    (20) Ler -> ID = INPUT FRASE . .

    PRINT           reduce using rule 20 (Ler -> ID = INPUT FRASE . .)
    ID              reduce using rule 20 (Ler -> ID = INPUT FRASE . .)
    TRUE            reduce using rule 20 (Ler -> ID = INPUT FRASE . .)
    FALSE           reduce using rule 20 (Ler -> ID = INPUT FRASE . .)
    NUM             reduce using rule 20 (Ler -> ID = INPUT FRASE . .)
    (               reduce using rule 20 (Ler -> ID = INPUT FRASE . .)
    $end            reduce using rule 20 (Ler -> ID = INPUT FRASE . .)
    return          reduce using rule 20 (Ler -> ID = INPUT FRASE . .)


state 69

    (11) Func -> ID begin Cod return expr end .

    ID              reduce using rule 11 (Func -> ID begin Cod return expr end .)
    PRINT           reduce using rule 11 (Func -> ID begin Cod return expr end .)
    TRUE            reduce using rule 11 (Func -> ID begin Cod return expr end .)
    FALSE           reduce using rule 11 (Func -> ID begin Cod return expr end .)
    NUM             reduce using rule 11 (Func -> ID begin Cod return expr end .)
    (               reduce using rule 11 (Func -> ID begin Cod return expr end .)
    $end            reduce using rule 11 (Func -> ID begin Cod return expr end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for E in state 56 resolved as shift
WARNING: shift/reduce conflict for OU in state 56 resolved as shift
WARNING: shift/reduce conflict for E in state 57 resolved as shift
WARNING: shift/reduce conflict for OU in state 57 resolved as shift
