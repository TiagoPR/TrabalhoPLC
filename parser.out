Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> Vars Funcs Cod
Rule 2     Escrever -> PRINT corpoescreve .
Rule 3     corpoescreve -> <empty>
Rule 4     corpoescreve -> alter corpoescreve
Rule 5     alter -> FRASE
Rule 6     alter -> expr
Rule 7     Vars -> <empty>
Rule 8     Vars -> var Vars
Rule 9     Funcs -> <empty>
Rule 10    Funcs -> Funcs Func
Rule 11    Func -> ID begin Cod end return expr .
Rule 12    Func -> ID begin Cod end .
Rule 13    Cod -> <empty>
Rule 14    var -> INT ID .
Rule 15    var -> INT ID = expr .
Rule 16    Cod -> Linha Cod
Rule 17    Linha -> Escrever
Rule 18    Linha -> atr
Rule 19    Linha -> ID ( ) .
Rule 20    Linha -> Ler
Rule 21    Linha -> cond
Rule 22    Linha -> SE
Rule 23    SE -> IF cond THEN Cod ELSE Cod
Rule 24    Ler -> ID = INPUT FRASE .
Rule 25    Linha -> Ciclo
Rule 26    Ciclo -> WHILE cond DO Cod end WHILE .
Rule 27    atr -> ID = expr .
Rule 28    atr -> ID = ID ( ) .
Rule 29    bool -> TRUE
Rule 30    bool -> FALSE
Rule 31    cond -> bool
Rule 32    cond -> expr
Rule 33    oprelacao -> INF
Rule 34    oprelacao -> EQUAL
Rule 35    oprelacao -> DIFF
Rule 36    oprelacao -> INFEQ
Rule 37    oprelacao -> SUP
Rule 38    oprelacao -> SUPEQ
Rule 39    cond -> expr oprelacao expr
Rule 40    cond -> cond E cond
Rule 41    cond -> cond OU cond
Rule 42    expr -> expr + termo
Rule 43    expr -> expr - termo
Rule 44    expr -> termo
Rule 45    termo -> termo * fator
Rule 46    termo -> termo / fator
Rule 47    termo -> termo % fator
Rule 48    termo -> fator
Rule 49    fator -> NUM
Rule 50    fator -> ID
Rule 51    fator -> ( expr )

Terminals, with rules where they appear

%                    : 47
(                    : 19 28 51
)                    : 19 28 51
*                    : 45
+                    : 42
-                    : 43
.                    : 2 11 12 14 15 19 24 26 27 28
/                    : 46
=                    : 15 24 27 28
DIFF                 : 35
DO                   : 26
E                    : 40
ELSE                 : 23
EQUAL                : 34
FALSE                : 30
FRASE                : 5 24
ID                   : 11 12 14 15 19 24 27 28 28 50
IF                   : 23
INF                  : 33
INFEQ                : 36
INPUT                : 24
INT                  : 14 15
NUM                  : 49
OU                   : 41
PRINT                : 2
SUP                  : 37
SUPEQ                : 38
THEN                 : 23
TRUE                 : 29
WHILE                : 26 26
begin                : 11 12
end                  : 11 12 26
error                : 
return               : 11

Nonterminals, with rules where they appear

Ciclo                : 25
Cod                  : 1 11 12 16 23 23 26
Escrever             : 17
Func                 : 10
Funcs                : 1 10
Ler                  : 20
Linha                : 16
Programa             : 0
SE                   : 22
Vars                 : 1 8
alter                : 4
atr                  : 18
bool                 : 31
cond                 : 21 23 26 40 40 41 41
corpoescreve         : 2 4
expr                 : 6 11 15 27 32 39 39 42 43 51
fator                : 45 46 47 48
oprelacao            : 39
termo                : 42 43 44 45 46 47
var                  : 8

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . Vars Funcs Cod
    (7) Vars -> .
    (8) Vars -> . var Vars
    (14) var -> . INT ID .
    (15) var -> . INT ID = expr .

    ID              reduce using rule 7 (Vars -> .)
    PRINT           reduce using rule 7 (Vars -> .)
    IF              reduce using rule 7 (Vars -> .)
    WHILE           reduce using rule 7 (Vars -> .)
    TRUE            reduce using rule 7 (Vars -> .)
    FALSE           reduce using rule 7 (Vars -> .)
    NUM             reduce using rule 7 (Vars -> .)
    (               reduce using rule 7 (Vars -> .)
    $end            reduce using rule 7 (Vars -> .)
    INT             shift and go to state 4

    Programa                       shift and go to state 1
    Vars                           shift and go to state 2
    var                            shift and go to state 3

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> Vars . Funcs Cod
    (9) Funcs -> .
    (10) Funcs -> . Funcs Func

    ID              reduce using rule 9 (Funcs -> .)
    PRINT           reduce using rule 9 (Funcs -> .)
    IF              reduce using rule 9 (Funcs -> .)
    WHILE           reduce using rule 9 (Funcs -> .)
    TRUE            reduce using rule 9 (Funcs -> .)
    FALSE           reduce using rule 9 (Funcs -> .)
    NUM             reduce using rule 9 (Funcs -> .)
    (               reduce using rule 9 (Funcs -> .)
    $end            reduce using rule 9 (Funcs -> .)

    Funcs                          shift and go to state 5

state 3

    (8) Vars -> var . Vars
    (7) Vars -> .
    (8) Vars -> . var Vars
    (14) var -> . INT ID .
    (15) var -> . INT ID = expr .

    ID              reduce using rule 7 (Vars -> .)
    PRINT           reduce using rule 7 (Vars -> .)
    IF              reduce using rule 7 (Vars -> .)
    WHILE           reduce using rule 7 (Vars -> .)
    TRUE            reduce using rule 7 (Vars -> .)
    FALSE           reduce using rule 7 (Vars -> .)
    NUM             reduce using rule 7 (Vars -> .)
    (               reduce using rule 7 (Vars -> .)
    $end            reduce using rule 7 (Vars -> .)
    INT             shift and go to state 4

    var                            shift and go to state 3
    Vars                           shift and go to state 6

state 4

    (14) var -> INT . ID .
    (15) var -> INT . ID = expr .

    ID              shift and go to state 7


state 5

    (1) Programa -> Vars Funcs . Cod
    (10) Funcs -> Funcs . Func
    (13) Cod -> .
    (16) Cod -> . Linha Cod
    (11) Func -> . ID begin Cod end return expr .
    (12) Func -> . ID begin Cod end .
    (17) Linha -> . Escrever
    (18) Linha -> . atr
    (19) Linha -> . ID ( ) .
    (20) Linha -> . Ler
    (21) Linha -> . cond
    (22) Linha -> . SE
    (25) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (27) atr -> . ID = expr .
    (28) atr -> . ID = ID ( ) .
    (24) Ler -> . ID = INPUT FRASE .
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (23) SE -> . IF cond THEN Cod ELSE Cod
    (26) Ciclo -> . WHILE cond DO Cod end WHILE .
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    $end            reduce using rule 13 (Cod -> .)
    ID              shift and go to state 11
    PRINT           shift and go to state 20
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    (               shift and go to state 15

    Cod                            shift and go to state 8
    Func                           shift and go to state 9
    Linha                          shift and go to state 10
    expr                           shift and go to state 12
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 16
    cond                           shift and go to state 17
    SE                             shift and go to state 18
    Ciclo                          shift and go to state 19
    bool                           shift and go to state 21
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 6

    (8) Vars -> var Vars .

    ID              reduce using rule 8 (Vars -> var Vars .)
    PRINT           reduce using rule 8 (Vars -> var Vars .)
    IF              reduce using rule 8 (Vars -> var Vars .)
    WHILE           reduce using rule 8 (Vars -> var Vars .)
    TRUE            reduce using rule 8 (Vars -> var Vars .)
    FALSE           reduce using rule 8 (Vars -> var Vars .)
    NUM             reduce using rule 8 (Vars -> var Vars .)
    (               reduce using rule 8 (Vars -> var Vars .)
    $end            reduce using rule 8 (Vars -> var Vars .)


state 7

    (14) var -> INT ID . .
    (15) var -> INT ID . = expr .

    .               shift and go to state 29
    =               shift and go to state 30


state 8

    (1) Programa -> Vars Funcs Cod .

    $end            reduce using rule 1 (Programa -> Vars Funcs Cod .)


state 9

    (10) Funcs -> Funcs Func .

    ID              reduce using rule 10 (Funcs -> Funcs Func .)
    PRINT           reduce using rule 10 (Funcs -> Funcs Func .)
    IF              reduce using rule 10 (Funcs -> Funcs Func .)
    WHILE           reduce using rule 10 (Funcs -> Funcs Func .)
    TRUE            reduce using rule 10 (Funcs -> Funcs Func .)
    FALSE           reduce using rule 10 (Funcs -> Funcs Func .)
    NUM             reduce using rule 10 (Funcs -> Funcs Func .)
    (               reduce using rule 10 (Funcs -> Funcs Func .)
    $end            reduce using rule 10 (Funcs -> Funcs Func .)


state 10

    (16) Cod -> Linha . Cod
    (13) Cod -> .
    (16) Cod -> . Linha Cod
    (17) Linha -> . Escrever
    (18) Linha -> . atr
    (19) Linha -> . ID ( ) .
    (20) Linha -> . Ler
    (21) Linha -> . cond
    (22) Linha -> . SE
    (25) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (27) atr -> . ID = expr .
    (28) atr -> . ID = ID ( ) .
    (24) Ler -> . ID = INPUT FRASE .
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (23) SE -> . IF cond THEN Cod ELSE Cod
    (26) Ciclo -> . WHILE cond DO Cod end WHILE .
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 13 (Cod -> .)
    end             reduce using rule 13 (Cod -> .)
    ELSE            reduce using rule 13 (Cod -> .)
    ID              shift and go to state 32
    PRINT           shift and go to state 20
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    (               shift and go to state 15

  ! ID              [ reduce using rule 13 (Cod -> .) ]
  ! PRINT           [ reduce using rule 13 (Cod -> .) ]
  ! IF              [ reduce using rule 13 (Cod -> .) ]
  ! WHILE           [ reduce using rule 13 (Cod -> .) ]
  ! TRUE            [ reduce using rule 13 (Cod -> .) ]
  ! FALSE           [ reduce using rule 13 (Cod -> .) ]
  ! NUM             [ reduce using rule 13 (Cod -> .) ]
  ! (               [ reduce using rule 13 (Cod -> .) ]

    Linha                          shift and go to state 10
    Cod                            shift and go to state 31
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 16
    cond                           shift and go to state 17
    SE                             shift and go to state 18
    Ciclo                          shift and go to state 19
    expr                           shift and go to state 12
    bool                           shift and go to state 21
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 11

    (11) Func -> ID . begin Cod end return expr .
    (12) Func -> ID . begin Cod end .
    (19) Linha -> ID . ( ) .
    (27) atr -> ID . = expr .
    (28) atr -> ID . = ID ( ) .
    (24) Ler -> ID . = INPUT FRASE .
    (50) fator -> ID .

  ! shift/reduce conflict for ( resolved as shift
    begin           shift and go to state 33
    (               shift and go to state 34
    =               shift and go to state 35
    *               reduce using rule 50 (fator -> ID .)
    /               reduce using rule 50 (fator -> ID .)
    %               reduce using rule 50 (fator -> ID .)
    +               reduce using rule 50 (fator -> ID .)
    -               reduce using rule 50 (fator -> ID .)
    INF             reduce using rule 50 (fator -> ID .)
    EQUAL           reduce using rule 50 (fator -> ID .)
    DIFF            reduce using rule 50 (fator -> ID .)
    INFEQ           reduce using rule 50 (fator -> ID .)
    SUP             reduce using rule 50 (fator -> ID .)
    SUPEQ           reduce using rule 50 (fator -> ID .)
    E               reduce using rule 50 (fator -> ID .)
    OU              reduce using rule 50 (fator -> ID .)
    ID              reduce using rule 50 (fator -> ID .)
    PRINT           reduce using rule 50 (fator -> ID .)
    IF              reduce using rule 50 (fator -> ID .)
    WHILE           reduce using rule 50 (fator -> ID .)
    TRUE            reduce using rule 50 (fator -> ID .)
    FALSE           reduce using rule 50 (fator -> ID .)
    NUM             reduce using rule 50 (fator -> ID .)
    $end            reduce using rule 50 (fator -> ID .)

  ! (               [ reduce using rule 50 (fator -> ID .) ]


state 12

    (32) cond -> expr .
    (39) cond -> expr . oprelacao expr
    (42) expr -> expr . + termo
    (43) expr -> expr . - termo
    (33) oprelacao -> . INF
    (34) oprelacao -> . EQUAL
    (35) oprelacao -> . DIFF
    (36) oprelacao -> . INFEQ
    (37) oprelacao -> . SUP
    (38) oprelacao -> . SUPEQ

    E               reduce using rule 32 (cond -> expr .)
    OU              reduce using rule 32 (cond -> expr .)
    ID              reduce using rule 32 (cond -> expr .)
    PRINT           reduce using rule 32 (cond -> expr .)
    IF              reduce using rule 32 (cond -> expr .)
    WHILE           reduce using rule 32 (cond -> expr .)
    TRUE            reduce using rule 32 (cond -> expr .)
    FALSE           reduce using rule 32 (cond -> expr .)
    NUM             reduce using rule 32 (cond -> expr .)
    (               reduce using rule 32 (cond -> expr .)
    $end            reduce using rule 32 (cond -> expr .)
    end             reduce using rule 32 (cond -> expr .)
    ELSE            reduce using rule 32 (cond -> expr .)
    THEN            reduce using rule 32 (cond -> expr .)
    DO              reduce using rule 32 (cond -> expr .)
    +               shift and go to state 37
    -               shift and go to state 38
    INF             shift and go to state 39
    EQUAL           shift and go to state 40
    DIFF            shift and go to state 41
    INFEQ           shift and go to state 42
    SUP             shift and go to state 43
    SUPEQ           shift and go to state 44

    oprelacao                      shift and go to state 36

state 13

    (17) Linha -> Escrever .

    ID              reduce using rule 17 (Linha -> Escrever .)
    PRINT           reduce using rule 17 (Linha -> Escrever .)
    IF              reduce using rule 17 (Linha -> Escrever .)
    WHILE           reduce using rule 17 (Linha -> Escrever .)
    TRUE            reduce using rule 17 (Linha -> Escrever .)
    FALSE           reduce using rule 17 (Linha -> Escrever .)
    NUM             reduce using rule 17 (Linha -> Escrever .)
    (               reduce using rule 17 (Linha -> Escrever .)
    $end            reduce using rule 17 (Linha -> Escrever .)
    end             reduce using rule 17 (Linha -> Escrever .)
    ELSE            reduce using rule 17 (Linha -> Escrever .)


state 14

    (18) Linha -> atr .

    ID              reduce using rule 18 (Linha -> atr .)
    PRINT           reduce using rule 18 (Linha -> atr .)
    IF              reduce using rule 18 (Linha -> atr .)
    WHILE           reduce using rule 18 (Linha -> atr .)
    TRUE            reduce using rule 18 (Linha -> atr .)
    FALSE           reduce using rule 18 (Linha -> atr .)
    NUM             reduce using rule 18 (Linha -> atr .)
    (               reduce using rule 18 (Linha -> atr .)
    $end            reduce using rule 18 (Linha -> atr .)
    end             reduce using rule 18 (Linha -> atr .)
    ELSE            reduce using rule 18 (Linha -> atr .)


state 15

    (51) fator -> ( . expr )
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    expr                           shift and go to state 45
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 16

    (20) Linha -> Ler .

    ID              reduce using rule 20 (Linha -> Ler .)
    PRINT           reduce using rule 20 (Linha -> Ler .)
    IF              reduce using rule 20 (Linha -> Ler .)
    WHILE           reduce using rule 20 (Linha -> Ler .)
    TRUE            reduce using rule 20 (Linha -> Ler .)
    FALSE           reduce using rule 20 (Linha -> Ler .)
    NUM             reduce using rule 20 (Linha -> Ler .)
    (               reduce using rule 20 (Linha -> Ler .)
    $end            reduce using rule 20 (Linha -> Ler .)
    end             reduce using rule 20 (Linha -> Ler .)
    ELSE            reduce using rule 20 (Linha -> Ler .)


state 17

    (21) Linha -> cond .
    (40) cond -> cond . E cond
    (41) cond -> cond . OU cond

    ID              reduce using rule 21 (Linha -> cond .)
    PRINT           reduce using rule 21 (Linha -> cond .)
    IF              reduce using rule 21 (Linha -> cond .)
    WHILE           reduce using rule 21 (Linha -> cond .)
    TRUE            reduce using rule 21 (Linha -> cond .)
    FALSE           reduce using rule 21 (Linha -> cond .)
    NUM             reduce using rule 21 (Linha -> cond .)
    (               reduce using rule 21 (Linha -> cond .)
    $end            reduce using rule 21 (Linha -> cond .)
    end             reduce using rule 21 (Linha -> cond .)
    ELSE            reduce using rule 21 (Linha -> cond .)
    E               shift and go to state 47
    OU              shift and go to state 48


state 18

    (22) Linha -> SE .

    ID              reduce using rule 22 (Linha -> SE .)
    PRINT           reduce using rule 22 (Linha -> SE .)
    IF              reduce using rule 22 (Linha -> SE .)
    WHILE           reduce using rule 22 (Linha -> SE .)
    TRUE            reduce using rule 22 (Linha -> SE .)
    FALSE           reduce using rule 22 (Linha -> SE .)
    NUM             reduce using rule 22 (Linha -> SE .)
    (               reduce using rule 22 (Linha -> SE .)
    $end            reduce using rule 22 (Linha -> SE .)
    end             reduce using rule 22 (Linha -> SE .)
    ELSE            reduce using rule 22 (Linha -> SE .)


state 19

    (25) Linha -> Ciclo .

    ID              reduce using rule 25 (Linha -> Ciclo .)
    PRINT           reduce using rule 25 (Linha -> Ciclo .)
    IF              reduce using rule 25 (Linha -> Ciclo .)
    WHILE           reduce using rule 25 (Linha -> Ciclo .)
    TRUE            reduce using rule 25 (Linha -> Ciclo .)
    FALSE           reduce using rule 25 (Linha -> Ciclo .)
    NUM             reduce using rule 25 (Linha -> Ciclo .)
    (               reduce using rule 25 (Linha -> Ciclo .)
    $end            reduce using rule 25 (Linha -> Ciclo .)
    end             reduce using rule 25 (Linha -> Ciclo .)
    ELSE            reduce using rule 25 (Linha -> Ciclo .)


state 20

    (2) Escrever -> PRINT . corpoescreve .
    (3) corpoescreve -> .
    (4) corpoescreve -> . alter corpoescreve
    (5) alter -> . FRASE
    (6) alter -> . expr
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    .               reduce using rule 3 (corpoescreve -> .)
    FRASE           shift and go to state 51
    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    corpoescreve                   shift and go to state 49
    alter                          shift and go to state 50
    expr                           shift and go to state 52
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 21

    (31) cond -> bool .

    E               reduce using rule 31 (cond -> bool .)
    OU              reduce using rule 31 (cond -> bool .)
    ID              reduce using rule 31 (cond -> bool .)
    PRINT           reduce using rule 31 (cond -> bool .)
    IF              reduce using rule 31 (cond -> bool .)
    WHILE           reduce using rule 31 (cond -> bool .)
    TRUE            reduce using rule 31 (cond -> bool .)
    FALSE           reduce using rule 31 (cond -> bool .)
    NUM             reduce using rule 31 (cond -> bool .)
    (               reduce using rule 31 (cond -> bool .)
    $end            reduce using rule 31 (cond -> bool .)
    end             reduce using rule 31 (cond -> bool .)
    ELSE            reduce using rule 31 (cond -> bool .)
    THEN            reduce using rule 31 (cond -> bool .)
    DO              reduce using rule 31 (cond -> bool .)


state 22

    (23) SE -> IF . cond THEN Cod ELSE Cod
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    cond                           shift and go to state 53
    bool                           shift and go to state 21
    expr                           shift and go to state 12
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 23

    (26) Ciclo -> WHILE . cond DO Cod end WHILE .
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    cond                           shift and go to state 54
    bool                           shift and go to state 21
    expr                           shift and go to state 12
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 24

    (29) bool -> TRUE .

    E               reduce using rule 29 (bool -> TRUE .)
    OU              reduce using rule 29 (bool -> TRUE .)
    ID              reduce using rule 29 (bool -> TRUE .)
    PRINT           reduce using rule 29 (bool -> TRUE .)
    IF              reduce using rule 29 (bool -> TRUE .)
    WHILE           reduce using rule 29 (bool -> TRUE .)
    TRUE            reduce using rule 29 (bool -> TRUE .)
    FALSE           reduce using rule 29 (bool -> TRUE .)
    NUM             reduce using rule 29 (bool -> TRUE .)
    (               reduce using rule 29 (bool -> TRUE .)
    $end            reduce using rule 29 (bool -> TRUE .)
    end             reduce using rule 29 (bool -> TRUE .)
    ELSE            reduce using rule 29 (bool -> TRUE .)
    THEN            reduce using rule 29 (bool -> TRUE .)
    DO              reduce using rule 29 (bool -> TRUE .)


state 25

    (30) bool -> FALSE .

    E               reduce using rule 30 (bool -> FALSE .)
    OU              reduce using rule 30 (bool -> FALSE .)
    ID              reduce using rule 30 (bool -> FALSE .)
    PRINT           reduce using rule 30 (bool -> FALSE .)
    IF              reduce using rule 30 (bool -> FALSE .)
    WHILE           reduce using rule 30 (bool -> FALSE .)
    TRUE            reduce using rule 30 (bool -> FALSE .)
    FALSE           reduce using rule 30 (bool -> FALSE .)
    NUM             reduce using rule 30 (bool -> FALSE .)
    (               reduce using rule 30 (bool -> FALSE .)
    $end            reduce using rule 30 (bool -> FALSE .)
    end             reduce using rule 30 (bool -> FALSE .)
    ELSE            reduce using rule 30 (bool -> FALSE .)
    THEN            reduce using rule 30 (bool -> FALSE .)
    DO              reduce using rule 30 (bool -> FALSE .)


state 26

    (44) expr -> termo .
    (45) termo -> termo . * fator
    (46) termo -> termo . / fator
    (47) termo -> termo . % fator

    +               reduce using rule 44 (expr -> termo .)
    -               reduce using rule 44 (expr -> termo .)
    INF             reduce using rule 44 (expr -> termo .)
    EQUAL           reduce using rule 44 (expr -> termo .)
    DIFF            reduce using rule 44 (expr -> termo .)
    INFEQ           reduce using rule 44 (expr -> termo .)
    SUP             reduce using rule 44 (expr -> termo .)
    SUPEQ           reduce using rule 44 (expr -> termo .)
    E               reduce using rule 44 (expr -> termo .)
    OU              reduce using rule 44 (expr -> termo .)
    ID              reduce using rule 44 (expr -> termo .)
    PRINT           reduce using rule 44 (expr -> termo .)
    IF              reduce using rule 44 (expr -> termo .)
    WHILE           reduce using rule 44 (expr -> termo .)
    TRUE            reduce using rule 44 (expr -> termo .)
    FALSE           reduce using rule 44 (expr -> termo .)
    NUM             reduce using rule 44 (expr -> termo .)
    (               reduce using rule 44 (expr -> termo .)
    $end            reduce using rule 44 (expr -> termo .)
    end             reduce using rule 44 (expr -> termo .)
    ELSE            reduce using rule 44 (expr -> termo .)
    )               reduce using rule 44 (expr -> termo .)
    FRASE           reduce using rule 44 (expr -> termo .)
    .               reduce using rule 44 (expr -> termo .)
    THEN            reduce using rule 44 (expr -> termo .)
    DO              reduce using rule 44 (expr -> termo .)
    *               shift and go to state 55
    /               shift and go to state 56
    %               shift and go to state 57


state 27

    (48) termo -> fator .

    *               reduce using rule 48 (termo -> fator .)
    /               reduce using rule 48 (termo -> fator .)
    %               reduce using rule 48 (termo -> fator .)
    +               reduce using rule 48 (termo -> fator .)
    -               reduce using rule 48 (termo -> fator .)
    INF             reduce using rule 48 (termo -> fator .)
    EQUAL           reduce using rule 48 (termo -> fator .)
    DIFF            reduce using rule 48 (termo -> fator .)
    INFEQ           reduce using rule 48 (termo -> fator .)
    SUP             reduce using rule 48 (termo -> fator .)
    SUPEQ           reduce using rule 48 (termo -> fator .)
    E               reduce using rule 48 (termo -> fator .)
    OU              reduce using rule 48 (termo -> fator .)
    ID              reduce using rule 48 (termo -> fator .)
    PRINT           reduce using rule 48 (termo -> fator .)
    IF              reduce using rule 48 (termo -> fator .)
    WHILE           reduce using rule 48 (termo -> fator .)
    TRUE            reduce using rule 48 (termo -> fator .)
    FALSE           reduce using rule 48 (termo -> fator .)
    NUM             reduce using rule 48 (termo -> fator .)
    (               reduce using rule 48 (termo -> fator .)
    $end            reduce using rule 48 (termo -> fator .)
    end             reduce using rule 48 (termo -> fator .)
    ELSE            reduce using rule 48 (termo -> fator .)
    )               reduce using rule 48 (termo -> fator .)
    FRASE           reduce using rule 48 (termo -> fator .)
    .               reduce using rule 48 (termo -> fator .)
    THEN            reduce using rule 48 (termo -> fator .)
    DO              reduce using rule 48 (termo -> fator .)


state 28

    (49) fator -> NUM .

    *               reduce using rule 49 (fator -> NUM .)
    /               reduce using rule 49 (fator -> NUM .)
    %               reduce using rule 49 (fator -> NUM .)
    +               reduce using rule 49 (fator -> NUM .)
    -               reduce using rule 49 (fator -> NUM .)
    INF             reduce using rule 49 (fator -> NUM .)
    EQUAL           reduce using rule 49 (fator -> NUM .)
    DIFF            reduce using rule 49 (fator -> NUM .)
    INFEQ           reduce using rule 49 (fator -> NUM .)
    SUP             reduce using rule 49 (fator -> NUM .)
    SUPEQ           reduce using rule 49 (fator -> NUM .)
    E               reduce using rule 49 (fator -> NUM .)
    OU              reduce using rule 49 (fator -> NUM .)
    ID              reduce using rule 49 (fator -> NUM .)
    PRINT           reduce using rule 49 (fator -> NUM .)
    IF              reduce using rule 49 (fator -> NUM .)
    WHILE           reduce using rule 49 (fator -> NUM .)
    TRUE            reduce using rule 49 (fator -> NUM .)
    FALSE           reduce using rule 49 (fator -> NUM .)
    NUM             reduce using rule 49 (fator -> NUM .)
    (               reduce using rule 49 (fator -> NUM .)
    $end            reduce using rule 49 (fator -> NUM .)
    end             reduce using rule 49 (fator -> NUM .)
    ELSE            reduce using rule 49 (fator -> NUM .)
    )               reduce using rule 49 (fator -> NUM .)
    FRASE           reduce using rule 49 (fator -> NUM .)
    .               reduce using rule 49 (fator -> NUM .)
    THEN            reduce using rule 49 (fator -> NUM .)
    DO              reduce using rule 49 (fator -> NUM .)


state 29

    (14) var -> INT ID . .

    INT             reduce using rule 14 (var -> INT ID . .)
    ID              reduce using rule 14 (var -> INT ID . .)
    PRINT           reduce using rule 14 (var -> INT ID . .)
    IF              reduce using rule 14 (var -> INT ID . .)
    WHILE           reduce using rule 14 (var -> INT ID . .)
    TRUE            reduce using rule 14 (var -> INT ID . .)
    FALSE           reduce using rule 14 (var -> INT ID . .)
    NUM             reduce using rule 14 (var -> INT ID . .)
    (               reduce using rule 14 (var -> INT ID . .)
    $end            reduce using rule 14 (var -> INT ID . .)


state 30

    (15) var -> INT ID = . expr .
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    expr                           shift and go to state 58
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 31

    (16) Cod -> Linha Cod .

    $end            reduce using rule 16 (Cod -> Linha Cod .)
    end             reduce using rule 16 (Cod -> Linha Cod .)
    ELSE            reduce using rule 16 (Cod -> Linha Cod .)
    ID              reduce using rule 16 (Cod -> Linha Cod .)
    PRINT           reduce using rule 16 (Cod -> Linha Cod .)
    IF              reduce using rule 16 (Cod -> Linha Cod .)
    WHILE           reduce using rule 16 (Cod -> Linha Cod .)
    TRUE            reduce using rule 16 (Cod -> Linha Cod .)
    FALSE           reduce using rule 16 (Cod -> Linha Cod .)
    NUM             reduce using rule 16 (Cod -> Linha Cod .)
    (               reduce using rule 16 (Cod -> Linha Cod .)


state 32

    (19) Linha -> ID . ( ) .
    (27) atr -> ID . = expr .
    (28) atr -> ID . = ID ( ) .
    (24) Ler -> ID . = INPUT FRASE .
    (50) fator -> ID .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 34
    =               shift and go to state 35
    *               reduce using rule 50 (fator -> ID .)
    /               reduce using rule 50 (fator -> ID .)
    %               reduce using rule 50 (fator -> ID .)
    +               reduce using rule 50 (fator -> ID .)
    -               reduce using rule 50 (fator -> ID .)
    INF             reduce using rule 50 (fator -> ID .)
    EQUAL           reduce using rule 50 (fator -> ID .)
    DIFF            reduce using rule 50 (fator -> ID .)
    INFEQ           reduce using rule 50 (fator -> ID .)
    SUP             reduce using rule 50 (fator -> ID .)
    SUPEQ           reduce using rule 50 (fator -> ID .)
    E               reduce using rule 50 (fator -> ID .)
    OU              reduce using rule 50 (fator -> ID .)
    $end            reduce using rule 50 (fator -> ID .)
    end             reduce using rule 50 (fator -> ID .)
    ELSE            reduce using rule 50 (fator -> ID .)
    ID              reduce using rule 50 (fator -> ID .)
    PRINT           reduce using rule 50 (fator -> ID .)
    IF              reduce using rule 50 (fator -> ID .)
    WHILE           reduce using rule 50 (fator -> ID .)
    TRUE            reduce using rule 50 (fator -> ID .)
    FALSE           reduce using rule 50 (fator -> ID .)
    NUM             reduce using rule 50 (fator -> ID .)

  ! (               [ reduce using rule 50 (fator -> ID .) ]


state 33

    (11) Func -> ID begin . Cod end return expr .
    (12) Func -> ID begin . Cod end .
    (13) Cod -> .
    (16) Cod -> . Linha Cod
    (17) Linha -> . Escrever
    (18) Linha -> . atr
    (19) Linha -> . ID ( ) .
    (20) Linha -> . Ler
    (21) Linha -> . cond
    (22) Linha -> . SE
    (25) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (27) atr -> . ID = expr .
    (28) atr -> . ID = ID ( ) .
    (24) Ler -> . ID = INPUT FRASE .
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (23) SE -> . IF cond THEN Cod ELSE Cod
    (26) Ciclo -> . WHILE cond DO Cod end WHILE .
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    end             reduce using rule 13 (Cod -> .)
    ID              shift and go to state 32
    PRINT           shift and go to state 20
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    (               shift and go to state 15

    Cod                            shift and go to state 59
    expr                           shift and go to state 12
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 16
    cond                           shift and go to state 17
    SE                             shift and go to state 18
    Ciclo                          shift and go to state 19
    bool                           shift and go to state 21
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 34

    (19) Linha -> ID ( . ) .

    )               shift and go to state 60


state 35

    (27) atr -> ID = . expr .
    (28) atr -> ID = . ID ( ) .
    (24) Ler -> ID = . INPUT FRASE .
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    ID              shift and go to state 61
    INPUT           shift and go to state 63
    NUM             shift and go to state 28
    (               shift and go to state 15

    expr                           shift and go to state 62
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 36

    (39) cond -> expr oprelacao . expr
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    expr                           shift and go to state 64
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 37

    (42) expr -> expr + . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    termo                          shift and go to state 65
    fator                          shift and go to state 27

state 38

    (43) expr -> expr - . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    termo                          shift and go to state 66
    fator                          shift and go to state 27

state 39

    (33) oprelacao -> INF .

    NUM             reduce using rule 33 (oprelacao -> INF .)
    ID              reduce using rule 33 (oprelacao -> INF .)
    (               reduce using rule 33 (oprelacao -> INF .)


state 40

    (34) oprelacao -> EQUAL .

    NUM             reduce using rule 34 (oprelacao -> EQUAL .)
    ID              reduce using rule 34 (oprelacao -> EQUAL .)
    (               reduce using rule 34 (oprelacao -> EQUAL .)


state 41

    (35) oprelacao -> DIFF .

    NUM             reduce using rule 35 (oprelacao -> DIFF .)
    ID              reduce using rule 35 (oprelacao -> DIFF .)
    (               reduce using rule 35 (oprelacao -> DIFF .)


state 42

    (36) oprelacao -> INFEQ .

    NUM             reduce using rule 36 (oprelacao -> INFEQ .)
    ID              reduce using rule 36 (oprelacao -> INFEQ .)
    (               reduce using rule 36 (oprelacao -> INFEQ .)


state 43

    (37) oprelacao -> SUP .

    NUM             reduce using rule 37 (oprelacao -> SUP .)
    ID              reduce using rule 37 (oprelacao -> SUP .)
    (               reduce using rule 37 (oprelacao -> SUP .)


state 44

    (38) oprelacao -> SUPEQ .

    NUM             reduce using rule 38 (oprelacao -> SUPEQ .)
    ID              reduce using rule 38 (oprelacao -> SUPEQ .)
    (               reduce using rule 38 (oprelacao -> SUPEQ .)


state 45

    (51) fator -> ( expr . )
    (42) expr -> expr . + termo
    (43) expr -> expr . - termo

    )               shift and go to state 67
    +               shift and go to state 37
    -               shift and go to state 38


state 46

    (50) fator -> ID .

    *               reduce using rule 50 (fator -> ID .)
    /               reduce using rule 50 (fator -> ID .)
    %               reduce using rule 50 (fator -> ID .)
    )               reduce using rule 50 (fator -> ID .)
    +               reduce using rule 50 (fator -> ID .)
    -               reduce using rule 50 (fator -> ID .)
    FRASE           reduce using rule 50 (fator -> ID .)
    NUM             reduce using rule 50 (fator -> ID .)
    ID              reduce using rule 50 (fator -> ID .)
    (               reduce using rule 50 (fator -> ID .)
    .               reduce using rule 50 (fator -> ID .)
    INF             reduce using rule 50 (fator -> ID .)
    EQUAL           reduce using rule 50 (fator -> ID .)
    DIFF            reduce using rule 50 (fator -> ID .)
    INFEQ           reduce using rule 50 (fator -> ID .)
    SUP             reduce using rule 50 (fator -> ID .)
    SUPEQ           reduce using rule 50 (fator -> ID .)
    THEN            reduce using rule 50 (fator -> ID .)
    E               reduce using rule 50 (fator -> ID .)
    OU              reduce using rule 50 (fator -> ID .)
    DO              reduce using rule 50 (fator -> ID .)
    PRINT           reduce using rule 50 (fator -> ID .)
    IF              reduce using rule 50 (fator -> ID .)
    WHILE           reduce using rule 50 (fator -> ID .)
    TRUE            reduce using rule 50 (fator -> ID .)
    FALSE           reduce using rule 50 (fator -> ID .)
    $end            reduce using rule 50 (fator -> ID .)
    end             reduce using rule 50 (fator -> ID .)
    ELSE            reduce using rule 50 (fator -> ID .)


state 47

    (40) cond -> cond E . cond
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    cond                           shift and go to state 68
    bool                           shift and go to state 21
    expr                           shift and go to state 12
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 48

    (41) cond -> cond OU . cond
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    cond                           shift and go to state 69
    bool                           shift and go to state 21
    expr                           shift and go to state 12
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 49

    (2) Escrever -> PRINT corpoescreve . .

    .               shift and go to state 70


state 50

    (4) corpoescreve -> alter . corpoescreve
    (3) corpoescreve -> .
    (4) corpoescreve -> . alter corpoescreve
    (5) alter -> . FRASE
    (6) alter -> . expr
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    .               reduce using rule 3 (corpoescreve -> .)
    FRASE           shift and go to state 51
    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    alter                          shift and go to state 50
    corpoescreve                   shift and go to state 71
    expr                           shift and go to state 52
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 51

    (5) alter -> FRASE .

    FRASE           reduce using rule 5 (alter -> FRASE .)
    NUM             reduce using rule 5 (alter -> FRASE .)
    ID              reduce using rule 5 (alter -> FRASE .)
    (               reduce using rule 5 (alter -> FRASE .)
    .               reduce using rule 5 (alter -> FRASE .)


state 52

    (6) alter -> expr .
    (42) expr -> expr . + termo
    (43) expr -> expr . - termo

    FRASE           reduce using rule 6 (alter -> expr .)
    NUM             reduce using rule 6 (alter -> expr .)
    ID              reduce using rule 6 (alter -> expr .)
    (               reduce using rule 6 (alter -> expr .)
    .               reduce using rule 6 (alter -> expr .)
    +               shift and go to state 37
    -               shift and go to state 38


state 53

    (23) SE -> IF cond . THEN Cod ELSE Cod
    (40) cond -> cond . E cond
    (41) cond -> cond . OU cond

    THEN            shift and go to state 72
    E               shift and go to state 47
    OU              shift and go to state 48


state 54

    (26) Ciclo -> WHILE cond . DO Cod end WHILE .
    (40) cond -> cond . E cond
    (41) cond -> cond . OU cond

    DO              shift and go to state 73
    E               shift and go to state 47
    OU              shift and go to state 48


state 55

    (45) termo -> termo * . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    fator                          shift and go to state 74

state 56

    (46) termo -> termo / . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    fator                          shift and go to state 75

state 57

    (47) termo -> termo % . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    fator                          shift and go to state 76

state 58

    (15) var -> INT ID = expr . .
    (42) expr -> expr . + termo
    (43) expr -> expr . - termo

    .               shift and go to state 77
    +               shift and go to state 37
    -               shift and go to state 38


state 59

    (11) Func -> ID begin Cod . end return expr .
    (12) Func -> ID begin Cod . end .

    end             shift and go to state 78


state 60

    (19) Linha -> ID ( ) . .

    .               shift and go to state 79


state 61

    (28) atr -> ID = ID . ( ) .
    (50) fator -> ID .

    (               shift and go to state 80
    *               reduce using rule 50 (fator -> ID .)
    /               reduce using rule 50 (fator -> ID .)
    %               reduce using rule 50 (fator -> ID .)
    .               reduce using rule 50 (fator -> ID .)
    +               reduce using rule 50 (fator -> ID .)
    -               reduce using rule 50 (fator -> ID .)


state 62

    (27) atr -> ID = expr . .
    (42) expr -> expr . + termo
    (43) expr -> expr . - termo

    .               shift and go to state 81
    +               shift and go to state 37
    -               shift and go to state 38


state 63

    (24) Ler -> ID = INPUT . FRASE .

    FRASE           shift and go to state 82


state 64

    (39) cond -> expr oprelacao expr .
    (42) expr -> expr . + termo
    (43) expr -> expr . - termo

    E               reduce using rule 39 (cond -> expr oprelacao expr .)
    OU              reduce using rule 39 (cond -> expr oprelacao expr .)
    ID              reduce using rule 39 (cond -> expr oprelacao expr .)
    PRINT           reduce using rule 39 (cond -> expr oprelacao expr .)
    IF              reduce using rule 39 (cond -> expr oprelacao expr .)
    WHILE           reduce using rule 39 (cond -> expr oprelacao expr .)
    TRUE            reduce using rule 39 (cond -> expr oprelacao expr .)
    FALSE           reduce using rule 39 (cond -> expr oprelacao expr .)
    NUM             reduce using rule 39 (cond -> expr oprelacao expr .)
    (               reduce using rule 39 (cond -> expr oprelacao expr .)
    $end            reduce using rule 39 (cond -> expr oprelacao expr .)
    end             reduce using rule 39 (cond -> expr oprelacao expr .)
    ELSE            reduce using rule 39 (cond -> expr oprelacao expr .)
    THEN            reduce using rule 39 (cond -> expr oprelacao expr .)
    DO              reduce using rule 39 (cond -> expr oprelacao expr .)
    +               shift and go to state 37
    -               shift and go to state 38


state 65

    (42) expr -> expr + termo .
    (45) termo -> termo . * fator
    (46) termo -> termo . / fator
    (47) termo -> termo . % fator

    +               reduce using rule 42 (expr -> expr + termo .)
    -               reduce using rule 42 (expr -> expr + termo .)
    INF             reduce using rule 42 (expr -> expr + termo .)
    EQUAL           reduce using rule 42 (expr -> expr + termo .)
    DIFF            reduce using rule 42 (expr -> expr + termo .)
    INFEQ           reduce using rule 42 (expr -> expr + termo .)
    SUP             reduce using rule 42 (expr -> expr + termo .)
    SUPEQ           reduce using rule 42 (expr -> expr + termo .)
    E               reduce using rule 42 (expr -> expr + termo .)
    OU              reduce using rule 42 (expr -> expr + termo .)
    ID              reduce using rule 42 (expr -> expr + termo .)
    PRINT           reduce using rule 42 (expr -> expr + termo .)
    IF              reduce using rule 42 (expr -> expr + termo .)
    WHILE           reduce using rule 42 (expr -> expr + termo .)
    TRUE            reduce using rule 42 (expr -> expr + termo .)
    FALSE           reduce using rule 42 (expr -> expr + termo .)
    NUM             reduce using rule 42 (expr -> expr + termo .)
    (               reduce using rule 42 (expr -> expr + termo .)
    $end            reduce using rule 42 (expr -> expr + termo .)
    end             reduce using rule 42 (expr -> expr + termo .)
    ELSE            reduce using rule 42 (expr -> expr + termo .)
    )               reduce using rule 42 (expr -> expr + termo .)
    FRASE           reduce using rule 42 (expr -> expr + termo .)
    .               reduce using rule 42 (expr -> expr + termo .)
    THEN            reduce using rule 42 (expr -> expr + termo .)
    DO              reduce using rule 42 (expr -> expr + termo .)
    *               shift and go to state 55
    /               shift and go to state 56
    %               shift and go to state 57


state 66

    (43) expr -> expr - termo .
    (45) termo -> termo . * fator
    (46) termo -> termo . / fator
    (47) termo -> termo . % fator

    +               reduce using rule 43 (expr -> expr - termo .)
    -               reduce using rule 43 (expr -> expr - termo .)
    INF             reduce using rule 43 (expr -> expr - termo .)
    EQUAL           reduce using rule 43 (expr -> expr - termo .)
    DIFF            reduce using rule 43 (expr -> expr - termo .)
    INFEQ           reduce using rule 43 (expr -> expr - termo .)
    SUP             reduce using rule 43 (expr -> expr - termo .)
    SUPEQ           reduce using rule 43 (expr -> expr - termo .)
    E               reduce using rule 43 (expr -> expr - termo .)
    OU              reduce using rule 43 (expr -> expr - termo .)
    ID              reduce using rule 43 (expr -> expr - termo .)
    PRINT           reduce using rule 43 (expr -> expr - termo .)
    IF              reduce using rule 43 (expr -> expr - termo .)
    WHILE           reduce using rule 43 (expr -> expr - termo .)
    TRUE            reduce using rule 43 (expr -> expr - termo .)
    FALSE           reduce using rule 43 (expr -> expr - termo .)
    NUM             reduce using rule 43 (expr -> expr - termo .)
    (               reduce using rule 43 (expr -> expr - termo .)
    $end            reduce using rule 43 (expr -> expr - termo .)
    end             reduce using rule 43 (expr -> expr - termo .)
    ELSE            reduce using rule 43 (expr -> expr - termo .)
    )               reduce using rule 43 (expr -> expr - termo .)
    FRASE           reduce using rule 43 (expr -> expr - termo .)
    .               reduce using rule 43 (expr -> expr - termo .)
    THEN            reduce using rule 43 (expr -> expr - termo .)
    DO              reduce using rule 43 (expr -> expr - termo .)
    *               shift and go to state 55
    /               shift and go to state 56
    %               shift and go to state 57


state 67

    (51) fator -> ( expr ) .

    *               reduce using rule 51 (fator -> ( expr ) .)
    /               reduce using rule 51 (fator -> ( expr ) .)
    %               reduce using rule 51 (fator -> ( expr ) .)
    +               reduce using rule 51 (fator -> ( expr ) .)
    -               reduce using rule 51 (fator -> ( expr ) .)
    INF             reduce using rule 51 (fator -> ( expr ) .)
    EQUAL           reduce using rule 51 (fator -> ( expr ) .)
    DIFF            reduce using rule 51 (fator -> ( expr ) .)
    INFEQ           reduce using rule 51 (fator -> ( expr ) .)
    SUP             reduce using rule 51 (fator -> ( expr ) .)
    SUPEQ           reduce using rule 51 (fator -> ( expr ) .)
    E               reduce using rule 51 (fator -> ( expr ) .)
    OU              reduce using rule 51 (fator -> ( expr ) .)
    ID              reduce using rule 51 (fator -> ( expr ) .)
    PRINT           reduce using rule 51 (fator -> ( expr ) .)
    IF              reduce using rule 51 (fator -> ( expr ) .)
    WHILE           reduce using rule 51 (fator -> ( expr ) .)
    TRUE            reduce using rule 51 (fator -> ( expr ) .)
    FALSE           reduce using rule 51 (fator -> ( expr ) .)
    NUM             reduce using rule 51 (fator -> ( expr ) .)
    (               reduce using rule 51 (fator -> ( expr ) .)
    $end            reduce using rule 51 (fator -> ( expr ) .)
    end             reduce using rule 51 (fator -> ( expr ) .)
    ELSE            reduce using rule 51 (fator -> ( expr ) .)
    )               reduce using rule 51 (fator -> ( expr ) .)
    FRASE           reduce using rule 51 (fator -> ( expr ) .)
    .               reduce using rule 51 (fator -> ( expr ) .)
    THEN            reduce using rule 51 (fator -> ( expr ) .)
    DO              reduce using rule 51 (fator -> ( expr ) .)


state 68

    (40) cond -> cond E cond .
    (40) cond -> cond . E cond
    (41) cond -> cond . OU cond

  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
    ID              reduce using rule 40 (cond -> cond E cond .)
    PRINT           reduce using rule 40 (cond -> cond E cond .)
    IF              reduce using rule 40 (cond -> cond E cond .)
    WHILE           reduce using rule 40 (cond -> cond E cond .)
    TRUE            reduce using rule 40 (cond -> cond E cond .)
    FALSE           reduce using rule 40 (cond -> cond E cond .)
    NUM             reduce using rule 40 (cond -> cond E cond .)
    (               reduce using rule 40 (cond -> cond E cond .)
    $end            reduce using rule 40 (cond -> cond E cond .)
    end             reduce using rule 40 (cond -> cond E cond .)
    ELSE            reduce using rule 40 (cond -> cond E cond .)
    THEN            reduce using rule 40 (cond -> cond E cond .)
    DO              reduce using rule 40 (cond -> cond E cond .)
    E               shift and go to state 47
    OU              shift and go to state 48

  ! E               [ reduce using rule 40 (cond -> cond E cond .) ]
  ! OU              [ reduce using rule 40 (cond -> cond E cond .) ]


state 69

    (41) cond -> cond OU cond .
    (40) cond -> cond . E cond
    (41) cond -> cond . OU cond

  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
    ID              reduce using rule 41 (cond -> cond OU cond .)
    PRINT           reduce using rule 41 (cond -> cond OU cond .)
    IF              reduce using rule 41 (cond -> cond OU cond .)
    WHILE           reduce using rule 41 (cond -> cond OU cond .)
    TRUE            reduce using rule 41 (cond -> cond OU cond .)
    FALSE           reduce using rule 41 (cond -> cond OU cond .)
    NUM             reduce using rule 41 (cond -> cond OU cond .)
    (               reduce using rule 41 (cond -> cond OU cond .)
    $end            reduce using rule 41 (cond -> cond OU cond .)
    end             reduce using rule 41 (cond -> cond OU cond .)
    ELSE            reduce using rule 41 (cond -> cond OU cond .)
    THEN            reduce using rule 41 (cond -> cond OU cond .)
    DO              reduce using rule 41 (cond -> cond OU cond .)
    E               shift and go to state 47
    OU              shift and go to state 48

  ! E               [ reduce using rule 41 (cond -> cond OU cond .) ]
  ! OU              [ reduce using rule 41 (cond -> cond OU cond .) ]


state 70

    (2) Escrever -> PRINT corpoescreve . .

    ID              reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    PRINT           reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    IF              reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    WHILE           reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    TRUE            reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    FALSE           reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    NUM             reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    (               reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    $end            reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    end             reduce using rule 2 (Escrever -> PRINT corpoescreve . .)
    ELSE            reduce using rule 2 (Escrever -> PRINT corpoescreve . .)


state 71

    (4) corpoescreve -> alter corpoescreve .

    .               reduce using rule 4 (corpoescreve -> alter corpoescreve .)


state 72

    (23) SE -> IF cond THEN . Cod ELSE Cod
    (13) Cod -> .
    (16) Cod -> . Linha Cod
    (17) Linha -> . Escrever
    (18) Linha -> . atr
    (19) Linha -> . ID ( ) .
    (20) Linha -> . Ler
    (21) Linha -> . cond
    (22) Linha -> . SE
    (25) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (27) atr -> . ID = expr .
    (28) atr -> . ID = ID ( ) .
    (24) Ler -> . ID = INPUT FRASE .
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (23) SE -> . IF cond THEN Cod ELSE Cod
    (26) Ciclo -> . WHILE cond DO Cod end WHILE .
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    ELSE            reduce using rule 13 (Cod -> .)
    ID              shift and go to state 32
    PRINT           shift and go to state 20
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    (               shift and go to state 15

    cond                           shift and go to state 17
    Cod                            shift and go to state 83
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 16
    SE                             shift and go to state 18
    Ciclo                          shift and go to state 19
    expr                           shift and go to state 12
    bool                           shift and go to state 21
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 73

    (26) Ciclo -> WHILE cond DO . Cod end WHILE .
    (13) Cod -> .
    (16) Cod -> . Linha Cod
    (17) Linha -> . Escrever
    (18) Linha -> . atr
    (19) Linha -> . ID ( ) .
    (20) Linha -> . Ler
    (21) Linha -> . cond
    (22) Linha -> . SE
    (25) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (27) atr -> . ID = expr .
    (28) atr -> . ID = ID ( ) .
    (24) Ler -> . ID = INPUT FRASE .
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (23) SE -> . IF cond THEN Cod ELSE Cod
    (26) Ciclo -> . WHILE cond DO Cod end WHILE .
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    end             reduce using rule 13 (Cod -> .)
    ID              shift and go to state 32
    PRINT           shift and go to state 20
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    (               shift and go to state 15

    cond                           shift and go to state 17
    Cod                            shift and go to state 84
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 16
    SE                             shift and go to state 18
    Ciclo                          shift and go to state 19
    expr                           shift and go to state 12
    bool                           shift and go to state 21
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 74

    (45) termo -> termo * fator .

    *               reduce using rule 45 (termo -> termo * fator .)
    /               reduce using rule 45 (termo -> termo * fator .)
    %               reduce using rule 45 (termo -> termo * fator .)
    +               reduce using rule 45 (termo -> termo * fator .)
    -               reduce using rule 45 (termo -> termo * fator .)
    INF             reduce using rule 45 (termo -> termo * fator .)
    EQUAL           reduce using rule 45 (termo -> termo * fator .)
    DIFF            reduce using rule 45 (termo -> termo * fator .)
    INFEQ           reduce using rule 45 (termo -> termo * fator .)
    SUP             reduce using rule 45 (termo -> termo * fator .)
    SUPEQ           reduce using rule 45 (termo -> termo * fator .)
    E               reduce using rule 45 (termo -> termo * fator .)
    OU              reduce using rule 45 (termo -> termo * fator .)
    ID              reduce using rule 45 (termo -> termo * fator .)
    PRINT           reduce using rule 45 (termo -> termo * fator .)
    IF              reduce using rule 45 (termo -> termo * fator .)
    WHILE           reduce using rule 45 (termo -> termo * fator .)
    TRUE            reduce using rule 45 (termo -> termo * fator .)
    FALSE           reduce using rule 45 (termo -> termo * fator .)
    NUM             reduce using rule 45 (termo -> termo * fator .)
    (               reduce using rule 45 (termo -> termo * fator .)
    $end            reduce using rule 45 (termo -> termo * fator .)
    end             reduce using rule 45 (termo -> termo * fator .)
    ELSE            reduce using rule 45 (termo -> termo * fator .)
    )               reduce using rule 45 (termo -> termo * fator .)
    FRASE           reduce using rule 45 (termo -> termo * fator .)
    .               reduce using rule 45 (termo -> termo * fator .)
    THEN            reduce using rule 45 (termo -> termo * fator .)
    DO              reduce using rule 45 (termo -> termo * fator .)


state 75

    (46) termo -> termo / fator .

    *               reduce using rule 46 (termo -> termo / fator .)
    /               reduce using rule 46 (termo -> termo / fator .)
    %               reduce using rule 46 (termo -> termo / fator .)
    +               reduce using rule 46 (termo -> termo / fator .)
    -               reduce using rule 46 (termo -> termo / fator .)
    INF             reduce using rule 46 (termo -> termo / fator .)
    EQUAL           reduce using rule 46 (termo -> termo / fator .)
    DIFF            reduce using rule 46 (termo -> termo / fator .)
    INFEQ           reduce using rule 46 (termo -> termo / fator .)
    SUP             reduce using rule 46 (termo -> termo / fator .)
    SUPEQ           reduce using rule 46 (termo -> termo / fator .)
    E               reduce using rule 46 (termo -> termo / fator .)
    OU              reduce using rule 46 (termo -> termo / fator .)
    ID              reduce using rule 46 (termo -> termo / fator .)
    PRINT           reduce using rule 46 (termo -> termo / fator .)
    IF              reduce using rule 46 (termo -> termo / fator .)
    WHILE           reduce using rule 46 (termo -> termo / fator .)
    TRUE            reduce using rule 46 (termo -> termo / fator .)
    FALSE           reduce using rule 46 (termo -> termo / fator .)
    NUM             reduce using rule 46 (termo -> termo / fator .)
    (               reduce using rule 46 (termo -> termo / fator .)
    $end            reduce using rule 46 (termo -> termo / fator .)
    end             reduce using rule 46 (termo -> termo / fator .)
    ELSE            reduce using rule 46 (termo -> termo / fator .)
    )               reduce using rule 46 (termo -> termo / fator .)
    FRASE           reduce using rule 46 (termo -> termo / fator .)
    .               reduce using rule 46 (termo -> termo / fator .)
    THEN            reduce using rule 46 (termo -> termo / fator .)
    DO              reduce using rule 46 (termo -> termo / fator .)


state 76

    (47) termo -> termo % fator .

    *               reduce using rule 47 (termo -> termo % fator .)
    /               reduce using rule 47 (termo -> termo % fator .)
    %               reduce using rule 47 (termo -> termo % fator .)
    +               reduce using rule 47 (termo -> termo % fator .)
    -               reduce using rule 47 (termo -> termo % fator .)
    INF             reduce using rule 47 (termo -> termo % fator .)
    EQUAL           reduce using rule 47 (termo -> termo % fator .)
    DIFF            reduce using rule 47 (termo -> termo % fator .)
    INFEQ           reduce using rule 47 (termo -> termo % fator .)
    SUP             reduce using rule 47 (termo -> termo % fator .)
    SUPEQ           reduce using rule 47 (termo -> termo % fator .)
    E               reduce using rule 47 (termo -> termo % fator .)
    OU              reduce using rule 47 (termo -> termo % fator .)
    ID              reduce using rule 47 (termo -> termo % fator .)
    PRINT           reduce using rule 47 (termo -> termo % fator .)
    IF              reduce using rule 47 (termo -> termo % fator .)
    WHILE           reduce using rule 47 (termo -> termo % fator .)
    TRUE            reduce using rule 47 (termo -> termo % fator .)
    FALSE           reduce using rule 47 (termo -> termo % fator .)
    NUM             reduce using rule 47 (termo -> termo % fator .)
    (               reduce using rule 47 (termo -> termo % fator .)
    $end            reduce using rule 47 (termo -> termo % fator .)
    end             reduce using rule 47 (termo -> termo % fator .)
    ELSE            reduce using rule 47 (termo -> termo % fator .)
    )               reduce using rule 47 (termo -> termo % fator .)
    FRASE           reduce using rule 47 (termo -> termo % fator .)
    .               reduce using rule 47 (termo -> termo % fator .)
    THEN            reduce using rule 47 (termo -> termo % fator .)
    DO              reduce using rule 47 (termo -> termo % fator .)


state 77

    (15) var -> INT ID = expr . .

    INT             reduce using rule 15 (var -> INT ID = expr . .)
    ID              reduce using rule 15 (var -> INT ID = expr . .)
    PRINT           reduce using rule 15 (var -> INT ID = expr . .)
    IF              reduce using rule 15 (var -> INT ID = expr . .)
    WHILE           reduce using rule 15 (var -> INT ID = expr . .)
    TRUE            reduce using rule 15 (var -> INT ID = expr . .)
    FALSE           reduce using rule 15 (var -> INT ID = expr . .)
    NUM             reduce using rule 15 (var -> INT ID = expr . .)
    (               reduce using rule 15 (var -> INT ID = expr . .)
    $end            reduce using rule 15 (var -> INT ID = expr . .)


state 78

    (11) Func -> ID begin Cod end . return expr .
    (12) Func -> ID begin Cod end . .

    return          shift and go to state 85
    .               shift and go to state 86


state 79

    (19) Linha -> ID ( ) . .

    ID              reduce using rule 19 (Linha -> ID ( ) . .)
    PRINT           reduce using rule 19 (Linha -> ID ( ) . .)
    IF              reduce using rule 19 (Linha -> ID ( ) . .)
    WHILE           reduce using rule 19 (Linha -> ID ( ) . .)
    TRUE            reduce using rule 19 (Linha -> ID ( ) . .)
    FALSE           reduce using rule 19 (Linha -> ID ( ) . .)
    NUM             reduce using rule 19 (Linha -> ID ( ) . .)
    (               reduce using rule 19 (Linha -> ID ( ) . .)
    $end            reduce using rule 19 (Linha -> ID ( ) . .)
    end             reduce using rule 19 (Linha -> ID ( ) . .)
    ELSE            reduce using rule 19 (Linha -> ID ( ) . .)


state 80

    (28) atr -> ID = ID ( . ) .

    )               shift and go to state 87


state 81

    (27) atr -> ID = expr . .

    ID              reduce using rule 27 (atr -> ID = expr . .)
    PRINT           reduce using rule 27 (atr -> ID = expr . .)
    IF              reduce using rule 27 (atr -> ID = expr . .)
    WHILE           reduce using rule 27 (atr -> ID = expr . .)
    TRUE            reduce using rule 27 (atr -> ID = expr . .)
    FALSE           reduce using rule 27 (atr -> ID = expr . .)
    NUM             reduce using rule 27 (atr -> ID = expr . .)
    (               reduce using rule 27 (atr -> ID = expr . .)
    $end            reduce using rule 27 (atr -> ID = expr . .)
    end             reduce using rule 27 (atr -> ID = expr . .)
    ELSE            reduce using rule 27 (atr -> ID = expr . .)


state 82

    (24) Ler -> ID = INPUT FRASE . .

    .               shift and go to state 88


state 83

    (23) SE -> IF cond THEN Cod . ELSE Cod

    ELSE            shift and go to state 89


state 84

    (26) Ciclo -> WHILE cond DO Cod . end WHILE .

    end             shift and go to state 90


state 85

    (11) Func -> ID begin Cod end return . expr .
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

    NUM             shift and go to state 28
    ID              shift and go to state 46
    (               shift and go to state 15

    expr                           shift and go to state 91
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 86

    (12) Func -> ID begin Cod end . .

    ID              reduce using rule 12 (Func -> ID begin Cod end . .)
    PRINT           reduce using rule 12 (Func -> ID begin Cod end . .)
    IF              reduce using rule 12 (Func -> ID begin Cod end . .)
    WHILE           reduce using rule 12 (Func -> ID begin Cod end . .)
    TRUE            reduce using rule 12 (Func -> ID begin Cod end . .)
    FALSE           reduce using rule 12 (Func -> ID begin Cod end . .)
    NUM             reduce using rule 12 (Func -> ID begin Cod end . .)
    (               reduce using rule 12 (Func -> ID begin Cod end . .)
    $end            reduce using rule 12 (Func -> ID begin Cod end . .)


state 87

    (28) atr -> ID = ID ( ) . .

    .               shift and go to state 92


state 88

    (24) Ler -> ID = INPUT FRASE . .

    ID              reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    PRINT           reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    IF              reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    WHILE           reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    TRUE            reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    FALSE           reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    NUM             reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    (               reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    $end            reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    end             reduce using rule 24 (Ler -> ID = INPUT FRASE . .)
    ELSE            reduce using rule 24 (Ler -> ID = INPUT FRASE . .)


state 89

    (23) SE -> IF cond THEN Cod ELSE . Cod
    (13) Cod -> .
    (16) Cod -> . Linha Cod
    (17) Linha -> . Escrever
    (18) Linha -> . atr
    (19) Linha -> . ID ( ) .
    (20) Linha -> . Ler
    (21) Linha -> . cond
    (22) Linha -> . SE
    (25) Linha -> . Ciclo
    (2) Escrever -> . PRINT corpoescreve .
    (27) atr -> . ID = expr .
    (28) atr -> . ID = ID ( ) .
    (24) Ler -> . ID = INPUT FRASE .
    (31) cond -> . bool
    (32) cond -> . expr
    (39) cond -> . expr oprelacao expr
    (40) cond -> . cond E cond
    (41) cond -> . cond OU cond
    (23) SE -> . IF cond THEN Cod ELSE Cod
    (26) Ciclo -> . WHILE cond DO Cod end WHILE .
    (29) bool -> . TRUE
    (30) bool -> . FALSE
    (42) expr -> . expr + termo
    (43) expr -> . expr - termo
    (44) expr -> . termo
    (45) termo -> . termo * fator
    (46) termo -> . termo / fator
    (47) termo -> . termo % fator
    (48) termo -> . fator
    (49) fator -> . NUM
    (50) fator -> . ID
    (51) fator -> . ( expr )

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 13 (Cod -> .)
    end             reduce using rule 13 (Cod -> .)
    ELSE            reduce using rule 13 (Cod -> .)
    ID              shift and go to state 32
    PRINT           shift and go to state 20
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NUM             shift and go to state 28
    (               shift and go to state 15

  ! ID              [ reduce using rule 13 (Cod -> .) ]
  ! PRINT           [ reduce using rule 13 (Cod -> .) ]
  ! IF              [ reduce using rule 13 (Cod -> .) ]
  ! WHILE           [ reduce using rule 13 (Cod -> .) ]
  ! TRUE            [ reduce using rule 13 (Cod -> .) ]
  ! FALSE           [ reduce using rule 13 (Cod -> .) ]
  ! NUM             [ reduce using rule 13 (Cod -> .) ]
  ! (               [ reduce using rule 13 (Cod -> .) ]

    cond                           shift and go to state 17
    Cod                            shift and go to state 93
    Linha                          shift and go to state 10
    Escrever                       shift and go to state 13
    atr                            shift and go to state 14
    Ler                            shift and go to state 16
    SE                             shift and go to state 18
    Ciclo                          shift and go to state 19
    expr                           shift and go to state 12
    bool                           shift and go to state 21
    termo                          shift and go to state 26
    fator                          shift and go to state 27

state 90

    (26) Ciclo -> WHILE cond DO Cod end . WHILE .

    WHILE           shift and go to state 94


state 91

    (11) Func -> ID begin Cod end return expr . .
    (42) expr -> expr . + termo
    (43) expr -> expr . - termo

    .               shift and go to state 95
    +               shift and go to state 37
    -               shift and go to state 38


state 92

    (28) atr -> ID = ID ( ) . .

    ID              reduce using rule 28 (atr -> ID = ID ( ) . .)
    PRINT           reduce using rule 28 (atr -> ID = ID ( ) . .)
    IF              reduce using rule 28 (atr -> ID = ID ( ) . .)
    WHILE           reduce using rule 28 (atr -> ID = ID ( ) . .)
    TRUE            reduce using rule 28 (atr -> ID = ID ( ) . .)
    FALSE           reduce using rule 28 (atr -> ID = ID ( ) . .)
    NUM             reduce using rule 28 (atr -> ID = ID ( ) . .)
    (               reduce using rule 28 (atr -> ID = ID ( ) . .)
    $end            reduce using rule 28 (atr -> ID = ID ( ) . .)
    end             reduce using rule 28 (atr -> ID = ID ( ) . .)
    ELSE            reduce using rule 28 (atr -> ID = ID ( ) . .)


state 93

    (23) SE -> IF cond THEN Cod ELSE Cod .

    ID              reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    PRINT           reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    IF              reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    WHILE           reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    TRUE            reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    FALSE           reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    NUM             reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    (               reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    $end            reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    end             reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)
    ELSE            reduce using rule 23 (SE -> IF cond THEN Cod ELSE Cod .)


state 94

    (26) Ciclo -> WHILE cond DO Cod end WHILE . .

    .               shift and go to state 96


state 95

    (11) Func -> ID begin Cod end return expr . .

    ID              reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    PRINT           reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    IF              reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    WHILE           reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    TRUE            reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    FALSE           reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    NUM             reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    (               reduce using rule 11 (Func -> ID begin Cod end return expr . .)
    $end            reduce using rule 11 (Func -> ID begin Cod end return expr . .)


state 96

    (26) Ciclo -> WHILE cond DO Cod end WHILE . .

    ID              reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    PRINT           reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    IF              reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    WHILE           reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    TRUE            reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    FALSE           reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    NUM             reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    (               reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    $end            reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    end             reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)
    ELSE            reduce using rule 26 (Ciclo -> WHILE cond DO Cod end WHILE . .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 10 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 10 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 10 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 10 resolved as shift
WARNING: shift/reduce conflict for NUM in state 10 resolved as shift
WARNING: shift/reduce conflict for ( in state 10 resolved as shift
WARNING: shift/reduce conflict for ( in state 11 resolved as shift
WARNING: shift/reduce conflict for ( in state 32 resolved as shift
WARNING: shift/reduce conflict for E in state 68 resolved as shift
WARNING: shift/reduce conflict for OU in state 68 resolved as shift
WARNING: shift/reduce conflict for E in state 69 resolved as shift
WARNING: shift/reduce conflict for OU in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 89 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 89 resolved as shift
WARNING: shift/reduce conflict for NUM in state 89 resolved as shift
WARNING: shift/reduce conflict for ( in state 89 resolved as shift
